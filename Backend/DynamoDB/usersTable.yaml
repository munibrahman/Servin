# /* Copyright (C) Voltic Labs, Inc - All Rights Reserved
#  * Unauthorized copying of this file, via any medium is strictly prohibited
#  * Proprietary and confidential
#  */

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: DynamoDB Stack by Voltic Labs Inc. Copyright (C) Voltic Labs, Inc - All Rights Reserved. Unauthorized copying of this file, via any medium is strictly prohibited. Proprietary and confidential.


Parameters:
  TableName:
    Type: String
    Default: dynamodbTable
    Description: Unique name for AWS DynamoDB Table
    AllowedPattern: '[a-zA-Z0-9_.-]+'


Outputs:
  TableName:
    Description: DynamoDB table name
    Value: !Ref DynamoDBTable
  Arn:
    Description: The Amazon Resource Name (ARN) of the DynamoDB table, such as arn:aws:dynamodb:us-east-2:123456789012:table/myDynamoDBTable.
    Value: !GetAtt DynamoDBTable.Arn
  # StreamArn:
  #   Description: The ARN of the DynamoDB stream, such as arn:aws:dynamodb:us-east-1:123456789012:table/testddbstack-myDynamoDBTable-012A1SL7SMP5Q/stream/2015-11-30T20:10:00.000. You must specify the StreamSpecification property to use this attribute.
  #   Value: !GetAtt DynamoDBTable.StreamArn

Resources:
  DynamoDBTable:                                                                            
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:                                                                 #1                                                                 
        -
          AttributeName: username                                                           #1A
          AttributeType: S                                                                  #1B
        # -
        #   AttributeName: stripe_account_id                                                    
        #   AttributeType: S                                                             
      BillingMode: PROVISIONED                                                              #2
      # GlobalSecondaryIndexes:                                                               #3
      #   - 
      #     IndexName: String                                                                 #3A
      #     KeySchema:                                                                        #3B
      #       - 
      #         AttributeName: String
      #         KeyType: String
      #     Projection:                                                                       #3C
      #       NonKeyAttributes:                                                               #3D
      #         - String
      #       ProjectionType: String                                                          #3F
      #     ProvisionedThroughput:                                                            #3G
      #       ReadCapacityUnits: 1
      #       WriteCapacityUnits: 1
      KeySchema: #required                                                                  #4
        - 
          AttributeName: username                                                           #4A
          KeyType: HASH                                                                     #4B
        # - AttributeName: sortKey
        #   KeyType: RANGE
      # LocalSecondaryIndexes:                                                                #5
        # - 
        #   IndexName: String
        #   KeySchema: 
        #     - 
        #       AttributeName: String
        #       KeyType: String
        #   Projection: 
        #     NonKeyAttributes: 
        #       - String
        #     ProjectionType: String
      # PointInTimeRecoverySpecification:                                                     #6
      #   PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:                                                                #7
        ReadCapacityUnits: 1                                                                #7A
        WriteCapacityUnits: 1
      # SSESpecification:                                                                     #8
      #   SSEEnabled: false
      # StreamSpecification:                                                                  #9
      #   StreamViewType: String
      TableName: !Sub ${TableName}                                                          #10
      Tags:                                                                                 #11
        - 
          Key: TableName
          Value: !Sub ${TableName}
      # TimeToLiveSpecification:                                                              #12
      #   AttributeName: String
      #   Enabled: Boolean
  


##################################################################################
#####     CURRENT STATUS    #####
#################################
#                  Resource                       |  Instantiation | Partial | Complete
# ------------------------------------------------|----------------|---------|---------
#   AWS::DynamoDB::Table                          |        X       |         |               
# ------------------------------------------------|----------------|---------|---------
# Instantiation:  The YAML outline of resource copied but commented out
# Partial:        The resource is instantiated when creating stack but some field still missing
# Complete:       The resource is instantiated and all fields required for project are set

##################################################################################
#####     NOTES    #####
##################################################################################
# WARNING:  AWS CloudFormation typically creates DynamoDB tables in parallel. 
#           However, if your template includes multiple DynamoDB tables with indexes, you must declare dependencies so that the tables are created sequentially. 
#           Amazon DynamoDB limits the number of tables with secondary indexes that are in the creating state. 
#           If you create multiple tables with indexes at the same time, DynamoDB returns an error and the stack operation fails. 
#           For an example, see DynamoDB Table with a DependsOn Attribute.
#           If you try and update 2 global secondary indices at once, the stack operation will also fail. You must delete 1 index before changing its name or creating another one.
# ********************************************************************************
# 1    (Attribute Definitions)
#       WARNING: The only attributes that should be defined here are those that will be used as keys.
#                If you won't be using an attribute as a key, but you define it anyway, your stack creation will fail.
# 1A - A name for the attribute. This is a required field.
# 1B - Type of the attribute can be:
#       S - the attribute is of type String
#       N - the attribute is of type Number
#       B - the attribute is of type Binary
#
# 2 - Specify how you are charged for read and write throughput and how you manage capacity.
#      Valid values include:
#         PROVISIONED - Sets the billing mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.
#         PAY_PER_REQUEST - Sets the billing mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
# If not specified, the default is PROVISIONED.
# 
# 3 - (GlobalSecondaryIndexes - GSI) https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html
#      The docs do a very good job of explaning what these are. Essentially, if you want to query or fetch items by using a non key attribute, you can use a gsi.
#      GSI DOES NOT rely on the original hash key, meaning that you can use any attribute to represent the hash key, unlike LSI (Local Secondary Indexes #4) .
# 3A - Required - Name of the GSI
# 3B - The complete key schema for a global secondary index. List of KeySchema objects, refer to #4 for how this is created.
# 3C - Represents attributes that are copied (projected) from the table into an index. 
#      No need to include primary key attributes and index key attributes those are automatically projected by default.
# 3D - Represents the non-key attribute names which will be projected into the index
# 3F - The set of attributes that are projected into the index. Possibilities include:
#          KEYS_ONLY - Only the index and primary keys are projected into the index.
#          INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes are in NonKeyAttributes.
#          ALL - All of the table attributes are projected into the index.
# 3G - Represents the provisioned throughput settings for the specified global secondary index.
#      These values are set to 0 if 2 is set to PAY_PER_REQUEST
#
# 4 - (KeySchema)
#      Specifies the attributes for the primary key of the table.
#      Dynamodb supports a composite primary key made up of a hash key and a sort key, or a simple primary key made from a single attribute.
# 4A - Name of the key attribute, this is a required field.
# 4B - Type of the key. It can be either:
#         HASH - Partition key
#         RANGE - sort key
#      I am also confused as you might be as to why the hash key is for the partition and the range key for sorting, the docs do a good job of explaining the difference.
#      - The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
#      - The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
# 
# 5 - (Local secondary indexes - LSI) https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html
#      You are probably wondering, whats the difference between the GSI and LSI? Good answer: https://stackoverflow.com/questions/21381744/difference-between-local-and-global-indexes-in-dynamodb
#      In LSI everything is similar to the GSI, except there is no option to set the provisioned throughput. As it uses the table's own provisioning instead.
#
# 6 - (Point in time recovery) https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery_Howitworks.html
#      Provides automatic backups of the dynamodb table data.
# 7 - (Provisioned Throughput) https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html
#     These values will ONLY work if 2 is set to PROVISIONED. Otherwise the read and write capacity units will be set to 0.
# 
# 8 - (Server Side Encryption) 
#     Allows you to enable server side encryption for this table. Now this is where it gets a little confusing.
#     By setting the value to true or false doesn't mean that it enables encryption or disables it.
#     Setting this to true, server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply).
#     False or not specified, server-side encryption is set to AWS owned CMK. (No charges)
#     To find out more about aws managed vs aws owned CMK, visit https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html
#
# 9 - (StreamSpecification)
#      When an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:
#         KEYS_ONLY - Only the key attributes of the modified item are written to the stream.
#         NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.
#         OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.
#         NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
#
# 10 - (TableName)
#     If you specify a name for a table, you will not be able to update items whose updates require Replacement.
#     To update replacement items, table must be deleted and remade again.
#
# 11 - Tags - Pretty self explanatory
# 
# 12 - (Timetolivespecification) - I dont know what this is for.
#       TODO: Come back and figure this out.
##################################################################################