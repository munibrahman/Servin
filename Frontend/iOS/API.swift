//  This file was automatically generated and should not be edited.

import AWSAppSync

public struct BankAccountInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, accountHolderName: String? = nil, accountHolderType: BusinessType? = nil, defaultForCurrency: Bool? = nil) {
    graphQLMap = ["id": id, "account_holder_name": accountHolderName, "account_holder_type": accountHolderType, "default_for_currency": defaultForCurrency]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var accountHolderName: String? {
    get {
      return graphQLMap["account_holder_name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "account_holder_name")
    }
  }

  public var accountHolderType: BusinessType? {
    get {
      return graphQLMap["account_holder_type"] as! BusinessType?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "account_holder_type")
    }
  }

  public var defaultForCurrency: Bool? {
    get {
      return graphQLMap["default_for_currency"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_for_currency")
    }
  }
}

public enum BusinessType: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case individual
  case company
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "individual": self = .individual
      case "company": self = .company
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .individual: return "individual"
      case .company: return "company"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: BusinessType, rhs: BusinessType) -> Bool {
    switch (lhs, rhs) {
      case (.individual, .individual): return true
      case (.company, .company): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct DebitCardInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: String, addressCity: String? = nil, addressCountry: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, addressState: String? = nil, addressZip: String? = nil, defaultForCurrency: Bool? = nil, expMonth: Int? = nil, expYear: Int? = nil, name: String? = nil) {
    graphQLMap = ["id": id, "address_city": addressCity, "address_country": addressCountry, "address_line1": addressLine1, "address_line2": addressLine2, "address_state": addressState, "address_zip": addressZip, "default_for_currency": defaultForCurrency, "exp_month": expMonth, "exp_year": expYear, "name": name]
  }

  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var addressCity: String? {
    get {
      return graphQLMap["address_city"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_city")
    }
  }

  public var addressCountry: String? {
    get {
      return graphQLMap["address_country"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_country")
    }
  }

  public var addressLine1: String? {
    get {
      return graphQLMap["address_line1"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_line1")
    }
  }

  public var addressLine2: String? {
    get {
      return graphQLMap["address_line2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_line2")
    }
  }

  public var addressState: String? {
    get {
      return graphQLMap["address_state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_state")
    }
  }

  public var addressZip: String? {
    get {
      return graphQLMap["address_zip"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address_zip")
    }
  }

  public var defaultForCurrency: Bool? {
    get {
      return graphQLMap["default_for_currency"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "default_for_currency")
    }
  }

  public var expMonth: Int? {
    get {
      return graphQLMap["exp_month"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "exp_month")
    }
  }

  public var expYear: Int? {
    get {
      return graphQLMap["exp_year"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "exp_year")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }
}

public struct PaymentIntentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(amount: Int, customerUsername: String) {
    graphQLMap = ["amount": amount, "customer_username": customerUsername]
  }

  public var amount: Int {
    get {
      return graphQLMap["amount"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "amount")
    }
  }

  public var customerUsername: String {
    get {
      return graphQLMap["customer_username"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "customer_username")
    }
  }
}

public struct UpdateSetupIntentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(intent: String, paymentMethod: String? = nil, paymentMethodTypes: String? = nil) {
    graphQLMap = ["intent": intent, "payment_method": paymentMethod, "payment_method_types": paymentMethodTypes]
  }

  public var intent: String {
    get {
      return graphQLMap["intent"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "intent")
    }
  }

  public var paymentMethod: String? {
    get {
      return graphQLMap["payment_method"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "payment_method")
    }
  }

  public var paymentMethodTypes: String? {
    get {
      return graphQLMap["payment_method_types"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "payment_method_types")
    }
  }
}

public struct ConfirmSetupIntentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(intent: String, paymentMethod: String? = nil, returlUrl: String? = nil) {
    graphQLMap = ["intent": intent, "payment_method": paymentMethod, "returl_url": returlUrl]
  }

  public var intent: String {
    get {
      return graphQLMap["intent"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "intent")
    }
  }

  public var paymentMethod: String? {
    get {
      return graphQLMap["payment_method"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "payment_method")
    }
  }

  public var returlUrl: String? {
    get {
      return graphQLMap["returl_url"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "returl_url")
    }
  }
}

public struct CancelSetupIntentInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(intent: String, cancellationReason: SetupIntentCancellationReason) {
    graphQLMap = ["intent": intent, "cancellation_reason": cancellationReason]
  }

  public var intent: String {
    get {
      return graphQLMap["intent"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "intent")
    }
  }

  public var cancellationReason: SetupIntentCancellationReason {
    get {
      return graphQLMap["cancellation_reason"] as! SetupIntentCancellationReason
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "cancellation_reason")
    }
  }
}

public enum SetupIntentCancellationReason: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case requestedByCustomer
  case duplicate
  case abandoned
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "requested_by_customer": self = .requestedByCustomer
      case "duplicate": self = .duplicate
      case "abandoned": self = .abandoned
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .requestedByCustomer: return "requested_by_customer"
      case .duplicate: return "duplicate"
      case .abandoned: return "abandoned"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: SetupIntentCancellationReason, rhs: SetupIntentCancellationReason) -> Bool {
    switch (lhs, rhs) {
      case (.requestedByCustomer, .requestedByCustomer): return true
      case (.duplicate, .duplicate): return true
      case (.abandoned, .abandoned): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct UpdateStripeCustomerInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(address: address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil, shipping: shipping? = nil) {
    graphQLMap = ["address": address, "email": email, "name": name, "phone": phone, "shipping": shipping]
  }

  public var address: address? {
    get {
      return graphQLMap["address"] as! address?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var shipping: shipping? {
    get {
      return graphQLMap["shipping"] as! shipping?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "shipping")
    }
  }
}

public struct address: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(line1: String, city: String? = nil, country: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
    graphQLMap = ["line1": line1, "city": city, "country": country, "line2": line2, "postal_code": postalCode, "state": state]
  }

  public var line1: String {
    get {
      return graphQLMap["line1"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "line1")
    }
  }

  public var city: String? {
    get {
      return graphQLMap["city"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var country: String? {
    get {
      return graphQLMap["country"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var line2: String? {
    get {
      return graphQLMap["line2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "line2")
    }
  }

  public var postalCode: String? {
    get {
      return graphQLMap["postal_code"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postal_code")
    }
  }

  public var state: String? {
    get {
      return graphQLMap["state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }
}

public struct shipping: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(address: address, name: String, phone: String? = nil) {
    graphQLMap = ["address": address, "name": name, "phone": phone]
  }

  public var address: address {
    get {
      return graphQLMap["address"] as! address
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }
}

/// STRIPE Related ENUMS
public enum ExternalAccountType: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case bankAccount
  case card
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "bank_account": self = .bankAccount
      case "card": self = .card
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .bankAccount: return "bank_account"
      case .card: return "card"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ExternalAccountType, rhs: ExternalAccountType) -> Bool {
    switch (lhs, rhs) {
      case (.bankAccount, .bankAccount): return true
      case (.card, .card): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ListPaymentMethodsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(type: PaymentMethodTypes, endingBefore: String? = nil, limit: Int? = nil, startingAfter: String? = nil) {
    graphQLMap = ["type": type, "ending_before": endingBefore, "limit": limit, "starting_after": startingAfter]
  }

  public var type: PaymentMethodTypes {
    get {
      return graphQLMap["type"] as! PaymentMethodTypes
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "type")
    }
  }

  public var endingBefore: String? {
    get {
      return graphQLMap["ending_before"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ending_before")
    }
  }

  public var limit: Int? {
    get {
      return graphQLMap["limit"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var startingAfter: String? {
    get {
      return graphQLMap["starting_after"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "starting_after")
    }
  }
}

public enum PaymentMethodTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case card
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "card": self = .card
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .card: return "card"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: PaymentMethodTypes, rhs: PaymentMethodTypes) -> Bool {
    switch (lhs, rhs) {
      case (.card, .card): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public final class UpdateStripeAccountMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStripeAccount($account_token: String!) {\n  updateStripeAccount(account_token: $account_token)\n}"

  public var account_token: String

  public init(account_token: String) {
    self.account_token = account_token
  }

  public var variables: GraphQLMap? {
    return ["account_token": account_token]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStripeAccount", arguments: ["account_token": GraphQLVariable("account_token")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStripeAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStripeAccount": updateStripeAccount])
    }

    /// Updates can only be done via passing a stripe account token.
    /// For more information, visit: https://stripe.com/docs/api#create_account_token
    public var updateStripeAccount: String? {
      get {
        return snapshot["updateStripeAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "updateStripeAccount")
      }
    }
  }
}

public final class CreateExternalAccountMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateExternalAccount($external_account_token: String!) {\n  createExternalAccount(external_account_token: $external_account_token)\n}"

  public var external_account_token: String

  public init(external_account_token: String) {
    self.external_account_token = external_account_token
  }

  public var variables: GraphQLMap? {
    return ["external_account_token": external_account_token]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createExternalAccount", arguments: ["external_account_token": GraphQLVariable("external_account_token")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createExternalAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createExternalAccount": createExternalAccount])
    }

    /// Creates an external account to attach to user's own stripe connected account.
    public var createExternalAccount: String? {
      get {
        return snapshot["createExternalAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "createExternalAccount")
      }
    }
  }
}

public final class DeleteExternalAccountMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteExternalAccount($id: String!) {\n  deleteExternalAccount(id: $id)\n}"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteExternalAccount", arguments: ["id": GraphQLVariable("id")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteExternalAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteExternalAccount": deleteExternalAccount])
    }

    /// Deletes external account that has been previously added to user's own connected account.
    public var deleteExternalAccount: String? {
      get {
        return snapshot["deleteExternalAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "deleteExternalAccount")
      }
    }
  }
}

public final class UpdateExternalBankAccountMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateExternalBankAccount($input: BankAccountInput) {\n  updateExternalBankAccount(input: $input)\n}"

  public var input: BankAccountInput?

  public init(input: BankAccountInput? = nil) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateExternalBankAccount", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateExternalBankAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateExternalBankAccount": updateExternalBankAccount])
    }

    /// Updates an external bank account information
    public var updateExternalBankAccount: String? {
      get {
        return snapshot["updateExternalBankAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "updateExternalBankAccount")
      }
    }
  }
}

public final class UpdateExternalDebitCardMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateExternalDebitCard($input: DebitCardInput!) {\n  updateExternalDebitCard(input: $input)\n}"

  public var input: DebitCardInput

  public init(input: DebitCardInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateExternalDebitCard", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateExternalDebitCard: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateExternalDebitCard": updateExternalDebitCard])
    }

    /// Updates an external debit card information
    public var updateExternalDebitCard: String? {
      get {
        return snapshot["updateExternalDebitCard"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "updateExternalDebitCard")
      }
    }
  }
}

public final class CreatePaymentIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreatePaymentIntent($input: PaymentIntentInput!) {\n  createPaymentIntent(input: $input)\n}"

  public var input: PaymentIntentInput

  public init(input: PaymentIntentInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createPaymentIntent", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createPaymentIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createPaymentIntent": createPaymentIntent])
    }

    /// Creates a payment intent object, with the tranfer destination set to another stripe customer's account
    public var createPaymentIntent: String? {
      get {
        return snapshot["createPaymentIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "createPaymentIntent")
      }
    }
  }
}

public final class CancelPaymentIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CancelPaymentIntent($intent: String!) {\n  cancelPaymentIntent(intent: $intent)\n}"

  public var intent: String

  public init(intent: String) {
    self.intent = intent
  }

  public var variables: GraphQLMap? {
    return ["intent": intent]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("cancelPaymentIntent", arguments: ["intent": GraphQLVariable("intent")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(cancelPaymentIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "cancelPaymentIntent": cancelPaymentIntent])
    }

    /// Removes a payment intent object.
    public var cancelPaymentIntent: String? {
      get {
        return snapshot["cancelPaymentIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "cancelPaymentIntent")
      }
    }
  }
}

public final class CreateSetupIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateSetupIntent {\n  createSetupIntent\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createSetupIntent", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createSetupIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createSetupIntent": createSetupIntent])
    }

    /// Sends all the available funds in a user's account to a given external account
    /// payoutAvailableFunds(external_account: String!): AWSJSON
    /// Creates a setup intent
    public var createSetupIntent: String? {
      get {
        return snapshot["createSetupIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "createSetupIntent")
      }
    }
  }
}

public final class UpdateSetupIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateSetupIntent($input: UpdateSetupIntentInput!) {\n  updateSetupIntent(input: $input)\n}"

  public var input: UpdateSetupIntentInput

  public init(input: UpdateSetupIntentInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateSetupIntent", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateSetupIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateSetupIntent": updateSetupIntent])
    }

    /// updates a given setup Intent. Call this method when a user changes their payment method, or selects a new payment method type.
    public var updateSetupIntent: String? {
      get {
        return snapshot["updateSetupIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "updateSetupIntent")
      }
    }
  }
}

public final class ConfirmSetupIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation ConfirmSetupIntent($input: ConfirmSetupIntentInput!) {\n  confirmSetupIntent(input: $input)\n}"

  public var input: ConfirmSetupIntentInput

  public init(input: ConfirmSetupIntentInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("confirmSetupIntent", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(confirmSetupIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "confirmSetupIntent": confirmSetupIntent])
    }

    /// confirms a given setup Intent. Call this method when a user "saves" their payment method.
    public var confirmSetupIntent: String? {
      get {
        return snapshot["confirmSetupIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "confirmSetupIntent")
      }
    }
  }
}

public final class CancelSetupIntentMutation: GraphQLMutation {
  public static let operationString =
    "mutation CancelSetupIntent($input: CancelSetupIntentInput!) {\n  cancelSetupIntent(input: $input)\n}"

  public var input: CancelSetupIntentInput

  public init(input: CancelSetupIntentInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("cancelSetupIntent", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(cancelSetupIntent: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "cancelSetupIntent": cancelSetupIntent])
    }

    /// Cancels a setup intent, call this when user abandons the setup
    public var cancelSetupIntent: String? {
      get {
        return snapshot["cancelSetupIntent"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "cancelSetupIntent")
      }
    }
  }
}

public final class UpdateStripeCustomerMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateStripeCustomer($input: UpdateStripeCustomerInput!) {\n  updateStripeCustomer(input: $input)\n}"

  public var input: UpdateStripeCustomerInput

  public init(input: UpdateStripeCustomerInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateStripeCustomer", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateStripeCustomer: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateStripeCustomer": updateStripeCustomer])
    }

    /// Customer
    /// For accounts that will be conducting payments
    public var updateStripeCustomer: String? {
      get {
        return snapshot["updateStripeCustomer"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "updateStripeCustomer")
      }
    }
  }
}

public final class AttachPaymentMethodMutation: GraphQLMutation {
  public static let operationString =
    "mutation AttachPaymentMethod($token: String!) {\n  attachPaymentMethod(token: $token)\n}"

  public var token: String

  public init(token: String) {
    self.token = token
  }

  public var variables: GraphQLMap? {
    return ["token": token]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("attachPaymentMethod", arguments: ["token": GraphQLVariable("token")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(attachPaymentMethod: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "attachPaymentMethod": attachPaymentMethod])
    }

    /// Attaches a given payment method on to a customer.
    /// The user making this request must also be a stripe customer.
    public var attachPaymentMethod: String? {
      get {
        return snapshot["attachPaymentMethod"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "attachPaymentMethod")
      }
    }
  }
}

public final class DetachPaymentMethodMutation: GraphQLMutation {
  public static let operationString =
    "mutation DetachPaymentMethod($token: String!) {\n  detachPaymentMethod(token: $token)\n}"

  public var token: String

  public init(token: String) {
    self.token = token
  }

  public var variables: GraphQLMap? {
    return ["token": token]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("detachPaymentMethod", arguments: ["token": GraphQLVariable("token")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(detachPaymentMethod: String? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "detachPaymentMethod": detachPaymentMethod])
    }

    /// Detaches a given payment method from a customer
    public var detachPaymentMethod: String? {
      get {
        return snapshot["detachPaymentMethod"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "detachPaymentMethod")
      }
    }
  }
}

public final class CreateConversationMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateConversation($discoveryId: String!) {\n  createConversation(discoveryId: $discoveryId) {\n    __typename\n    createdAt\n    id\n    discoveryId\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    latestMessage {\n      __typename\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      content\n      conversationId\n      createdAt\n      id\n      isSent\n      recipient {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      sender\n    }\n    discovery {\n      __typename\n      geohashPrefix\n      discoveryId\n      active\n      cognitoUserName\n      description\n      price\n      request_or_offer\n      time\n      title\n      geoJson\n      image_0\n      image_1\n      image_2\n      image_3\n      image_4\n      image_5\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      latitude\n      longitude\n      isSaved\n    }\n    authorUserName\n  }\n}"

  public var discoveryId: String

  public init(discoveryId: String) {
    self.discoveryId = discoveryId
  }

  public var variables: GraphQLMap? {
    return ["discoveryId": discoveryId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createConversation", arguments: ["discoveryId": GraphQLVariable("discoveryId")], type: .object(CreateConversation.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createConversation: CreateConversation? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createConversation": createConversation.flatMap { $0.snapshot }])
    }

    /// SERVIN
    /// Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
    /// You can create a conversation based on the id. createdAt and id fields will be determined by us (So, users can't manipulate them)
    /// createConversation(createdAt: String, id: ID!, discoveryId: String!): Conversation
    public var createConversation: CreateConversation? {
      get {
        return (snapshot["createConversation"] as? Snapshot).flatMap { CreateConversation(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createConversation")
      }
    }

    public struct CreateConversation: GraphQLSelectionSet {
      public static let possibleTypes = ["Conversation"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
        GraphQLField("discovery", type: .object(Discovery.selections)),
        GraphQLField("authorUserName", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
        self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The Conversation's timestamp.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// A unique identifier for the Conversation.
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// The Conversation's discoveryId. (formerly known as name)
      public var discoveryId: String {
        get {
          return snapshot["discoveryId"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// The Conversation's messages.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Latest message of a conversation
      public var latestMessage: LatestMessage? {
        get {
          return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
        }
      }

      /// Discovery related to the conversation
      public var discovery: Discovery? {
        get {
          return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
        }
      }

      /// Username of the person that started this conversation
      public var authorUserName: String? {
        get {
          return snapshot["authorUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorUserName")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct LatestMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSent", type: .scalar(Bool.self)),
          GraphQLField("recipient", type: .object(Recipient.selections)),
          GraphQLField("sender", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
          self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// The message content.
        public var content: String {
          get {
            return snapshot["content"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        /// The id of the Conversation this message belongs to. This is the table primary key.
        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        /// The message timestamp. This is also the table sort key.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// Generated id for a message -- read-only
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// Flag denoting if this message has been accepted by the server or not.
        public var isSent: Bool? {
          get {
            return snapshot["isSent"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSent")
          }
        }

        public var recipient: Recipient? {
          get {
            return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
          }
        }

        public var sender: String? {
          get {
            return snapshot["sender"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sender")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }

        public struct Recipient: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }

      public struct Discovery: GraphQLSelectionSet {
        public static let possibleTypes = ["Discovery"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geohashPrefix", type: .scalar(Int.self)),
          GraphQLField("discoveryId", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("cognitoUserName", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("price", type: .scalar(Int.self)),
          GraphQLField("request_or_offer", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("geoJson", type: .scalar(String.self)),
          GraphQLField("image_0", type: .scalar(String.self)),
          GraphQLField("image_1", type: .scalar(String.self)),
          GraphQLField("image_2", type: .scalar(String.self)),
          GraphQLField("image_3", type: .scalar(String.self)),
          GraphQLField("image_4", type: .scalar(String.self)),
          GraphQLField("image_5", type: .scalar(String.self)),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("latitude", type: .scalar(Double.self)),
          GraphQLField("longitude", type: .scalar(Double.self)),
          GraphQLField("isSaved", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
          self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// geo has prefix - used as the primary partition key
        public var geohashPrefix: Int? {
          get {
            return snapshot["geohashPrefix"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "geohashPrefix")
          }
        }

        /// id of the discovery, used as the primary sort key
        public var discoveryId: String? {
          get {
            return snapshot["discoveryId"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// Whether this discovery is on the network or not
        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        /// Username of the owner, same thing as cognitoId
        public var cognitoUserName: String? {
          get {
            return snapshot["cognitoUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "cognitoUserName")
          }
        }

        /// Description of the discovery
        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        /// Price of the discovery
        public var price: Int? {
          get {
            return snapshot["price"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "price")
          }
        }

        /// Is this a request or an offer
        public var requestOrOffer: String? {
          get {
            return snapshot["request_or_offer"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "request_or_offer")
          }
        }

        /// When this discovery was created, seconds from epoch
        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        /// Title of the discovery
        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        /// JSON Data that shows the positon of this discovery
        public var geoJson: String? {
          get {
            return snapshot["geoJson"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "geoJson")
          }
        }

        /// image 1
        public var image_0: String? {
          get {
            return snapshot["image_0"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_0")
          }
        }

        /// image 2
        public var image_1: String? {
          get {
            return snapshot["image_1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_1")
          }
        }

        /// image 3
        public var image_2: String? {
          get {
            return snapshot["image_2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_2")
          }
        }

        /// image 4
        public var image_3: String? {
          get {
            return snapshot["image_3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_3")
          }
        }

        /// image 5
        public var image_4: String? {
          get {
            return snapshot["image_4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_4")
          }
        }

        /// image 5
        public var image_5: String? {
          get {
            return snapshot["image_5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_5")
          }
        }

        /// Author of this discovery
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// Latitude of the discovery in degrees
        public var latitude: Double? {
          get {
            return snapshot["latitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        /// Longitude of the discovery in degrees
        public var longitude: Double? {
          get {
            return snapshot["longitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        /// checks to see if this discovery has been added to my saved discoveries or not
        public var isSaved: Bool? {
          get {
            return snapshot["isSaved"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSaved")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMessage($content: String, $conversationId: ID!) {\n  createMessage(content: $content, conversationId: $conversationId) {\n    __typename\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    content\n    conversationId\n    createdAt\n    id\n    isSent\n    recipient {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    sender\n  }\n}"

  public var content: String?
  public var conversationId: GraphQLID

  public init(content: String? = nil, conversationId: GraphQLID) {
    self.content = content
    self.conversationId = conversationId
  }

  public var variables: GraphQLMap? {
    return ["content": content, "conversationId": conversationId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMessage", arguments: ["content": GraphQLVariable("content"), "conversationId": GraphQLVariable("conversationId")], type: .object(CreateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMessage: CreateMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMessage": createMessage.flatMap { $0.snapshot }])
    }

    /// Create a message in a Conversation.
    /// We only let the users pass in content and the conversation id, we take care of created at and message id.
    /// createMessage(content: String, conversationId: ID!, createdAt: String!, id: ID!): Message
    public var createMessage: CreateMessage? {
      get {
        return (snapshot["createMessage"] as? Snapshot).flatMap { CreateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMessage")
      }
    }

    public struct CreateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("content", type: .nonNull(.scalar(String.self))),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSent", type: .scalar(Bool.self)),
        GraphQLField("recipient", type: .object(Recipient.selections)),
        GraphQLField("sender", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
        self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// The message content.
      public var content: String {
        get {
          return snapshot["content"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      /// The id of the Conversation this message belongs to. This is the table primary key.
      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      /// The message timestamp. This is also the table sort key.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// Generated id for a message -- read-only
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// Flag denoting if this message has been accepted by the server or not.
      public var isSent: Bool? {
        get {
          return snapshot["isSent"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSent")
        }
      }

      public var recipient: Recipient? {
        get {
          return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
        }
      }

      public var sender: String? {
        get {
          return snapshot["sender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sender")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }

      public struct Recipient: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateUserConversationsMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUserConversations($conversationId: ID!, $username: ID!) {\n  createUserConversations(conversationId: $conversationId, username: $username) {\n    __typename\n    associated {\n      __typename\n      associated {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n      conversation {\n        __typename\n        createdAt\n        id\n        discoveryId\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        latestMessage {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        discovery {\n          __typename\n          geohashPrefix\n          discoveryId\n          active\n          cognitoUserName\n          description\n          price\n          request_or_offer\n          time\n          title\n          geoJson\n          image_0\n          image_1\n          image_2\n          image_3\n          image_4\n          image_5\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          latitude\n          longitude\n          isSaved\n        }\n        authorUserName\n      }\n      conversationId\n      user {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      username\n    }\n    conversation {\n      __typename\n      createdAt\n      id\n      discoveryId\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      latestMessage {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      discovery {\n        __typename\n        geohashPrefix\n        discoveryId\n        active\n        cognitoUserName\n        description\n        price\n        request_or_offer\n        time\n        title\n        geoJson\n        image_0\n        image_1\n        image_2\n        image_3\n        image_4\n        image_5\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        latitude\n        longitude\n        isSaved\n      }\n      authorUserName\n    }\n    conversationId\n    user {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    username\n  }\n}"

  public var conversationId: GraphQLID
  public var username: GraphQLID

  public init(conversationId: GraphQLID, username: GraphQLID) {
    self.conversationId = conversationId
    self.username = username
  }

  public var variables: GraphQLMap? {
    return ["conversationId": conversationId, "username": username]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUserConversations", arguments: ["conversationId": GraphQLVariable("conversationId"), "username": GraphQLVariable("username")], type: .object(CreateUserConversation.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUserConversations: CreateUserConversation? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUserConversations": createUserConversations.flatMap { $0.snapshot }])
    }

    /// Put a single value of type 'User'. If an item does not exist with the same key the item will be created. If there exists an item at that key already, it will be updated.
    /// No need to create a new user
    /// createUser(username: String!): User
    /// Put a single value of type 'UserConversations'. If an item does not exist with the same key the item will be created. If there exists an item at that key already, it will be updated.
    public var createUserConversations: CreateUserConversation? {
      get {
        return (snapshot["createUserConversations"] as? Snapshot).flatMap { CreateUserConversation(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUserConversations")
      }
    }

    public struct CreateUserConversation: GraphQLSelectionSet {
      public static let possibleTypes = ["UserConversations"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("associated", type: .list(.object(Associated.selections))),
        GraphQLField("conversation", type: .object(Conversation.selections)),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
        self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var associated: [Associated?]? {
        get {
          return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
        }
      }

      public var conversation: Conversation? {
        get {
          return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
        }
      }

      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      public struct Associated: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConversations"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("associated", type: .list(.object(Associated.selections))),
          GraphQLField("conversation", type: .object(Conversation.selections)),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
          self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var associated: [Associated?]? {
          get {
            return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
          }
        }

        public var conversation: Conversation? {
          get {
            return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
          }
        }

        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        public var user: User? {
          get {
            return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "user")
          }
        }

        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        public struct Associated: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["Conversation"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
            GraphQLField("discovery", type: .object(Discovery.selections)),
            GraphQLField("authorUserName", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
            self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The Conversation's timestamp.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// A unique identifier for the Conversation.
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// The Conversation's discoveryId. (formerly known as name)
          public var discoveryId: String {
            get {
              return snapshot["discoveryId"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// The Conversation's messages.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Latest message of a conversation
          public var latestMessage: LatestMessage? {
            get {
              return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
            }
          }

          /// Discovery related to the conversation
          public var discovery: Discovery? {
            get {
              return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
            }
          }

          /// Username of the person that started this conversation
          public var authorUserName: String? {
            get {
              return snapshot["authorUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "authorUserName")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct LatestMessage: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Discovery: GraphQLSelectionSet {
            public static let possibleTypes = ["Discovery"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("geohashPrefix", type: .scalar(Int.self)),
              GraphQLField("discoveryId", type: .scalar(String.self)),
              GraphQLField("active", type: .scalar(Bool.self)),
              GraphQLField("cognitoUserName", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
              GraphQLField("request_or_offer", type: .scalar(String.self)),
              GraphQLField("time", type: .scalar(Int.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("geoJson", type: .scalar(String.self)),
              GraphQLField("image_0", type: .scalar(String.self)),
              GraphQLField("image_1", type: .scalar(String.self)),
              GraphQLField("image_2", type: .scalar(String.self)),
              GraphQLField("image_3", type: .scalar(String.self)),
              GraphQLField("image_4", type: .scalar(String.self)),
              GraphQLField("image_5", type: .scalar(String.self)),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("latitude", type: .scalar(Double.self)),
              GraphQLField("longitude", type: .scalar(Double.self)),
              GraphQLField("isSaved", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
              self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// geo has prefix - used as the primary partition key
            public var geohashPrefix: Int? {
              get {
                return snapshot["geohashPrefix"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "geohashPrefix")
              }
            }

            /// id of the discovery, used as the primary sort key
            public var discoveryId: String? {
              get {
                return snapshot["discoveryId"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// Whether this discovery is on the network or not
            public var active: Bool? {
              get {
                return snapshot["active"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "active")
              }
            }

            /// Username of the owner, same thing as cognitoId
            public var cognitoUserName: String? {
              get {
                return snapshot["cognitoUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "cognitoUserName")
              }
            }

            /// Description of the discovery
            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            /// Price of the discovery
            public var price: Int? {
              get {
                return snapshot["price"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "price")
              }
            }

            /// Is this a request or an offer
            public var requestOrOffer: String? {
              get {
                return snapshot["request_or_offer"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "request_or_offer")
              }
            }

            /// When this discovery was created, seconds from epoch
            public var time: Int? {
              get {
                return snapshot["time"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "time")
              }
            }

            /// Title of the discovery
            public var title: String? {
              get {
                return snapshot["title"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "title")
              }
            }

            /// JSON Data that shows the positon of this discovery
            public var geoJson: String? {
              get {
                return snapshot["geoJson"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "geoJson")
              }
            }

            /// image 1
            public var image_0: String? {
              get {
                return snapshot["image_0"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_0")
              }
            }

            /// image 2
            public var image_1: String? {
              get {
                return snapshot["image_1"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_1")
              }
            }

            /// image 3
            public var image_2: String? {
              get {
                return snapshot["image_2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_2")
              }
            }

            /// image 4
            public var image_3: String? {
              get {
                return snapshot["image_3"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_3")
              }
            }

            /// image 5
            public var image_4: String? {
              get {
                return snapshot["image_4"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_4")
              }
            }

            /// image 5
            public var image_5: String? {
              get {
                return snapshot["image_5"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_5")
              }
            }

            /// Author of this discovery
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// Latitude of the discovery in degrees
            public var latitude: Double? {
              get {
                return snapshot["latitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "latitude")
              }
            }

            /// Longitude of the discovery in degrees
            public var longitude: Double? {
              get {
                return snapshot["longitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "longitude")
              }
            }

            /// checks to see if this discovery has been added to my saved discoveries or not
            public var isSaved: Bool? {
              get {
                return snapshot["isSaved"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSaved")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["Conversation"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
          GraphQLField("discovery", type: .object(Discovery.selections)),
          GraphQLField("authorUserName", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
          self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The Conversation's timestamp.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// A unique identifier for the Conversation.
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// The Conversation's discoveryId. (formerly known as name)
        public var discoveryId: String {
          get {
            return snapshot["discoveryId"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// The Conversation's messages.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Latest message of a conversation
        public var latestMessage: LatestMessage? {
          get {
            return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
          }
        }

        /// Discovery related to the conversation
        public var discovery: Discovery? {
          get {
            return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
          }
        }

        /// Username of the person that started this conversation
        public var authorUserName: String? {
          get {
            return snapshot["authorUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorUserName")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct LatestMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Discovery: GraphQLSelectionSet {
          public static let possibleTypes = ["Discovery"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("geohashPrefix", type: .scalar(Int.self)),
            GraphQLField("discoveryId", type: .scalar(String.self)),
            GraphQLField("active", type: .scalar(Bool.self)),
            GraphQLField("cognitoUserName", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
            GraphQLField("request_or_offer", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("geoJson", type: .scalar(String.self)),
            GraphQLField("image_0", type: .scalar(String.self)),
            GraphQLField("image_1", type: .scalar(String.self)),
            GraphQLField("image_2", type: .scalar(String.self)),
            GraphQLField("image_3", type: .scalar(String.self)),
            GraphQLField("image_4", type: .scalar(String.self)),
            GraphQLField("image_5", type: .scalar(String.self)),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("latitude", type: .scalar(Double.self)),
            GraphQLField("longitude", type: .scalar(Double.self)),
            GraphQLField("isSaved", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
            self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// geo has prefix - used as the primary partition key
          public var geohashPrefix: Int? {
            get {
              return snapshot["geohashPrefix"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "geohashPrefix")
            }
          }

          /// id of the discovery, used as the primary sort key
          public var discoveryId: String? {
            get {
              return snapshot["discoveryId"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// Whether this discovery is on the network or not
          public var active: Bool? {
            get {
              return snapshot["active"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "active")
            }
          }

          /// Username of the owner, same thing as cognitoId
          public var cognitoUserName: String? {
            get {
              return snapshot["cognitoUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "cognitoUserName")
            }
          }

          /// Description of the discovery
          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          /// Price of the discovery
          public var price: Int? {
            get {
              return snapshot["price"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "price")
            }
          }

          /// Is this a request or an offer
          public var requestOrOffer: String? {
            get {
              return snapshot["request_or_offer"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "request_or_offer")
            }
          }

          /// When this discovery was created, seconds from epoch
          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          /// Title of the discovery
          public var title: String? {
            get {
              return snapshot["title"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "title")
            }
          }

          /// JSON Data that shows the positon of this discovery
          public var geoJson: String? {
            get {
              return snapshot["geoJson"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "geoJson")
            }
          }

          /// image 1
          public var image_0: String? {
            get {
              return snapshot["image_0"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_0")
            }
          }

          /// image 2
          public var image_1: String? {
            get {
              return snapshot["image_1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_1")
            }
          }

          /// image 3
          public var image_2: String? {
            get {
              return snapshot["image_2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_2")
            }
          }

          /// image 4
          public var image_3: String? {
            get {
              return snapshot["image_3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_3")
            }
          }

          /// image 5
          public var image_4: String? {
            get {
              return snapshot["image_4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_4")
            }
          }

          /// image 5
          public var image_5: String? {
            get {
              return snapshot["image_5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_5")
            }
          }

          /// Author of this discovery
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// Latitude of the discovery in degrees
          public var latitude: Double? {
            get {
              return snapshot["latitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "latitude")
            }
          }

          /// Longitude of the discovery in degrees
          public var longitude: Double? {
            get {
              return snapshot["longitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "longitude")
            }
          }

          /// checks to see if this discovery has been added to my saved discoveries or not
          public var isSaved: Bool? {
            get {
              return snapshot["isSaved"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSaved")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateProfileInformationMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateProfileInformation($given_name: String, $family_name: String, $about: String, $school: String) {\n  updateProfileInformation(given_name: $given_name, family_name: $family_name, about: $about, school: $school) {\n    __typename\n    username\n    conversations {\n      __typename\n      nextToken\n      userConversations {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n    }\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    registered\n    about\n    profilePic\n    rating\n    signUpDate\n    family_name\n    given_name\n    school\n    categories\n    hasChosenCategories\n  }\n}"

  public var given_name: String?
  public var family_name: String?
  public var about: String?
  public var school: String?

  public init(given_name: String? = nil, family_name: String? = nil, about: String? = nil, school: String? = nil) {
    self.given_name = given_name
    self.family_name = family_name
    self.about = about
    self.school = school
  }

  public var variables: GraphQLMap? {
    return ["given_name": given_name, "family_name": family_name, "about": about, "school": school]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateProfileInformation", arguments: ["given_name": GraphQLVariable("given_name"), "family_name": GraphQLVariable("family_name"), "about": GraphQLVariable("about"), "school": GraphQLVariable("school")], type: .object(UpdateProfileInformation.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateProfileInformation: UpdateProfileInformation? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateProfileInformation": updateProfileInformation.flatMap { $0.snapshot }])
    }

    /// Allows a user to edit their information
    public var updateProfileInformation: UpdateProfileInformation? {
      get {
        return (snapshot["updateProfileInformation"] as? Snapshot).flatMap { UpdateProfileInformation(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateProfileInformation")
      }
    }

    public struct UpdateProfileInformation: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("conversations", type: .object(Conversation.selections)),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("registered", type: .scalar(Bool.self)),
        GraphQLField("about", type: .scalar(String.self)),
        GraphQLField("profilePic", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(Double.self)),
        GraphQLField("signUpDate", type: .scalar(Double.self)),
        GraphQLField("family_name", type: .scalar(String.self)),
        GraphQLField("given_name", type: .scalar(String.self)),
        GraphQLField("school", type: .scalar(String.self)),
        GraphQLField("categories", type: .list(.scalar(String.self))),
        GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
        self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the user. (cognito id)
      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
      public var conversations: Conversation? {
        get {
          return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
        }
      }

      /// Get a users messages by querying a GSI on the Messages table.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Is the user registered?
      public var registered: Bool? {
        get {
          return snapshot["registered"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "registered")
        }
      }

      /// About section of a user
      public var about: String? {
        get {
          return snapshot["about"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "about")
        }
      }

      /// Link to the profile image of the user
      public var profilePic: String? {
        get {
          return snapshot["profilePic"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "profilePic")
        }
      }

      /// Rating of this user
      public var rating: Double? {
        get {
          return snapshot["rating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      /// Date that a user signed up on, represented in epoch time in milliseconds
      public var signUpDate: Double? {
        get {
          return snapshot["signUpDate"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "signUpDate")
        }
      }

      /// The last name of a user
      public var familyName: String? {
        get {
          return snapshot["family_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "family_name")
        }
      }

      /// The first name of a user
      public var givenName: String? {
        get {
          return snapshot["given_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "given_name")
        }
      }

      /// School the person attends
      public var school: String? {
        get {
          return snapshot["school"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "school")
        }
      }

      /// categories
      public var categories: [String?]? {
        get {
          return snapshot["categories"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "categories")
        }
      }

      /// Determines whether a person has already selected categories for the first time or not.
      public var hasChosenCategories: Bool? {
        get {
          return snapshot["hasChosenCategories"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "hasChosenCategories")
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConverstationsConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
          self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var userConversations: [UserConversation?]? {
          get {
            return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
          }
        }

        public struct UserConversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateCategoriesMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateCategories($list: [String]) {\n  updateCategories(list: $list) {\n    __typename\n    username\n    conversations {\n      __typename\n      nextToken\n      userConversations {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n    }\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    registered\n    about\n    profilePic\n    rating\n    signUpDate\n    family_name\n    given_name\n    school\n    categories\n    hasChosenCategories\n  }\n}"

  public var list: [String?]?

  public init(list: [String?]? = nil) {
    self.list = list
  }

  public var variables: GraphQLMap? {
    return ["list": list]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCategories", arguments: ["list": GraphQLVariable("list")], type: .object(UpdateCategory.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateCategories: UpdateCategory? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateCategories": updateCategories.flatMap { $0.snapshot }])
    }

    /// Allows a user to update their categories
    public var updateCategories: UpdateCategory? {
      get {
        return (snapshot["updateCategories"] as? Snapshot).flatMap { UpdateCategory(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateCategories")
      }
    }

    public struct UpdateCategory: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("conversations", type: .object(Conversation.selections)),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("registered", type: .scalar(Bool.self)),
        GraphQLField("about", type: .scalar(String.self)),
        GraphQLField("profilePic", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(Double.self)),
        GraphQLField("signUpDate", type: .scalar(Double.self)),
        GraphQLField("family_name", type: .scalar(String.self)),
        GraphQLField("given_name", type: .scalar(String.self)),
        GraphQLField("school", type: .scalar(String.self)),
        GraphQLField("categories", type: .list(.scalar(String.self))),
        GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
        self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the user. (cognito id)
      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
      public var conversations: Conversation? {
        get {
          return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
        }
      }

      /// Get a users messages by querying a GSI on the Messages table.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Is the user registered?
      public var registered: Bool? {
        get {
          return snapshot["registered"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "registered")
        }
      }

      /// About section of a user
      public var about: String? {
        get {
          return snapshot["about"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "about")
        }
      }

      /// Link to the profile image of the user
      public var profilePic: String? {
        get {
          return snapshot["profilePic"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "profilePic")
        }
      }

      /// Rating of this user
      public var rating: Double? {
        get {
          return snapshot["rating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      /// Date that a user signed up on, represented in epoch time in milliseconds
      public var signUpDate: Double? {
        get {
          return snapshot["signUpDate"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "signUpDate")
        }
      }

      /// The last name of a user
      public var familyName: String? {
        get {
          return snapshot["family_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "family_name")
        }
      }

      /// The first name of a user
      public var givenName: String? {
        get {
          return snapshot["given_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "given_name")
        }
      }

      /// School the person attends
      public var school: String? {
        get {
          return snapshot["school"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "school")
        }
      }

      /// categories
      public var categories: [String?]? {
        get {
          return snapshot["categories"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "categories")
        }
      }

      /// Determines whether a person has already selected categories for the first time or not.
      public var hasChosenCategories: Bool? {
        get {
          return snapshot["hasChosenCategories"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "hasChosenCategories")
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConverstationsConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
          self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var userConversations: [UserConversation?]? {
          get {
            return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
          }
        }

        public struct UserConversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class EditDiscoveryMutation: GraphQLMutation {
  public static let operationString =
    "mutation EditDiscovery($geohashPrefix: Int, $discoveryId: String, $title: String, $price: Int, $request_or_offer: String, $description: String) {\n  editDiscovery(geohashPrefix: $geohashPrefix, discoveryId: $discoveryId, title: $title, price: $price, request_or_offer: $request_or_offer, description: $description) {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public var geohashPrefix: Int?
  public var discoveryId: String?
  public var title: String?
  public var price: Int?
  public var request_or_offer: String?
  public var description: String?

  public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, title: String? = nil, price: Int? = nil, request_or_offer: String? = nil, description: String? = nil) {
    self.geohashPrefix = geohashPrefix
    self.discoveryId = discoveryId
    self.title = title
    self.price = price
    self.request_or_offer = request_or_offer
    self.description = description
  }

  public var variables: GraphQLMap? {
    return ["geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "title": title, "price": price, "request_or_offer": request_or_offer, "description": description]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("editDiscovery", arguments: ["geohashPrefix": GraphQLVariable("geohashPrefix"), "discoveryId": GraphQLVariable("discoveryId"), "title": GraphQLVariable("title"), "price": GraphQLVariable("price"), "request_or_offer": GraphQLVariable("request_or_offer"), "description": GraphQLVariable("description")], type: .object(EditDiscovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(editDiscovery: EditDiscovery? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "editDiscovery": editDiscovery.flatMap { $0.snapshot }])
    }

    /// Allows a user to edit their own discovery, if trying to edit someone else's it throws an error.
    public var editDiscovery: EditDiscovery? {
      get {
        return (snapshot["editDiscovery"] as? Snapshot).flatMap { EditDiscovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "editDiscovery")
      }
    }

    public struct EditDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class PostDiscoveryMutation: GraphQLMutation {
  public static let operationString =
    "mutation PostDiscovery($title: String!, $price: Int!, $request_or_offer: String!, $description: String!, $lat: Float!, $long: Float!) {\n  postDiscovery(title: $title, price: $price, request_or_offer: $request_or_offer, description: $description, lat: $lat, long: $long) {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public var title: String
  public var price: Int
  public var request_or_offer: String
  public var description: String
  public var lat: Double
  public var long: Double

  public init(title: String, price: Int, request_or_offer: String, description: String, lat: Double, long: Double) {
    self.title = title
    self.price = price
    self.request_or_offer = request_or_offer
    self.description = description
    self.lat = lat
    self.long = long
  }

  public var variables: GraphQLMap? {
    return ["title": title, "price": price, "request_or_offer": request_or_offer, "description": description, "lat": lat, "long": long]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("postDiscovery", arguments: ["title": GraphQLVariable("title"), "price": GraphQLVariable("price"), "request_or_offer": GraphQLVariable("request_or_offer"), "description": GraphQLVariable("description"), "lat": GraphQLVariable("lat"), "long": GraphQLVariable("long")], type: .object(PostDiscovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(postDiscovery: PostDiscovery? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "postDiscovery": postDiscovery.flatMap { $0.snapshot }])
    }

    /// Allows a user to post a discovey
    public var postDiscovery: PostDiscovery? {
      get {
        return (snapshot["postDiscovery"] as? Snapshot).flatMap { PostDiscovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "postDiscovery")
      }
    }

    public struct PostDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateProfilePictureMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateProfilePicture($key: String) {\n  updateProfilePicture(key: $key) {\n    __typename\n    username\n    conversations {\n      __typename\n      nextToken\n      userConversations {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n    }\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    registered\n    about\n    profilePic\n    rating\n    signUpDate\n    family_name\n    given_name\n    school\n    categories\n    hasChosenCategories\n  }\n}"

  public var key: String?

  public init(key: String? = nil) {
    self.key = key
  }

  public var variables: GraphQLMap? {
    return ["key": key]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateProfilePicture", arguments: ["key": GraphQLVariable("key")], type: .object(UpdateProfilePicture.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateProfilePicture: UpdateProfilePicture? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateProfilePicture": updateProfilePicture.flatMap { $0.snapshot }])
    }

    /// Allows the user to update the path to their profile picture, stored in an S3 Bucket.
    public var updateProfilePicture: UpdateProfilePicture? {
      get {
        return (snapshot["updateProfilePicture"] as? Snapshot).flatMap { UpdateProfilePicture(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateProfilePicture")
      }
    }

    public struct UpdateProfilePicture: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("conversations", type: .object(Conversation.selections)),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("registered", type: .scalar(Bool.self)),
        GraphQLField("about", type: .scalar(String.self)),
        GraphQLField("profilePic", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(Double.self)),
        GraphQLField("signUpDate", type: .scalar(Double.self)),
        GraphQLField("family_name", type: .scalar(String.self)),
        GraphQLField("given_name", type: .scalar(String.self)),
        GraphQLField("school", type: .scalar(String.self)),
        GraphQLField("categories", type: .list(.scalar(String.self))),
        GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
        self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the user. (cognito id)
      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
      public var conversations: Conversation? {
        get {
          return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
        }
      }

      /// Get a users messages by querying a GSI on the Messages table.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Is the user registered?
      public var registered: Bool? {
        get {
          return snapshot["registered"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "registered")
        }
      }

      /// About section of a user
      public var about: String? {
        get {
          return snapshot["about"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "about")
        }
      }

      /// Link to the profile image of the user
      public var profilePic: String? {
        get {
          return snapshot["profilePic"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "profilePic")
        }
      }

      /// Rating of this user
      public var rating: Double? {
        get {
          return snapshot["rating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      /// Date that a user signed up on, represented in epoch time in milliseconds
      public var signUpDate: Double? {
        get {
          return snapshot["signUpDate"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "signUpDate")
        }
      }

      /// The last name of a user
      public var familyName: String? {
        get {
          return snapshot["family_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "family_name")
        }
      }

      /// The first name of a user
      public var givenName: String? {
        get {
          return snapshot["given_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "given_name")
        }
      }

      /// School the person attends
      public var school: String? {
        get {
          return snapshot["school"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "school")
        }
      }

      /// categories
      public var categories: [String?]? {
        get {
          return snapshot["categories"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "categories")
        }
      }

      /// Determines whether a person has already selected categories for the first time or not.
      public var hasChosenCategories: Bool? {
        get {
          return snapshot["hasChosenCategories"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "hasChosenCategories")
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConverstationsConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
          self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var userConversations: [UserConversation?]? {
          get {
            return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
          }
        }

        public struct UserConversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SaveDiscoveryMutation: GraphQLMutation {
  public static let operationString =
    "mutation SaveDiscovery($discoveryId: String!) {\n  saveDiscovery(discoveryId: $discoveryId) {\n    __typename\n    discoveryId\n    discovery {\n      __typename\n      geohashPrefix\n      discoveryId\n      active\n      cognitoUserName\n      description\n      price\n      request_or_offer\n      time\n      title\n      geoJson\n      image_0\n      image_1\n      image_2\n      image_3\n      image_4\n      image_5\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      latitude\n      longitude\n      isSaved\n    }\n  }\n}"

  public var discoveryId: String

  public init(discoveryId: String) {
    self.discoveryId = discoveryId
  }

  public var variables: GraphQLMap? {
    return ["discoveryId": discoveryId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("saveDiscovery", arguments: ["discoveryId": GraphQLVariable("discoveryId")], type: .object(SaveDiscovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(saveDiscovery: SaveDiscovery? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "saveDiscovery": saveDiscovery.flatMap { $0.snapshot }])
    }

    /// Saves a given discovery in the user's favourites
    public var saveDiscovery: SaveDiscovery? {
      get {
        return (snapshot["saveDiscovery"] as? Snapshot).flatMap { SaveDiscovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "saveDiscovery")
      }
    }

    public struct SaveDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["SavedDiscovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
        GraphQLField("discovery", type: .object(Discovery.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(discoveryId: String, discovery: Discovery? = nil) {
        self.init(snapshot: ["__typename": "SavedDiscovery", "discoveryId": discoveryId, "discovery": discovery.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var discoveryId: String {
        get {
          return snapshot["discoveryId"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      public var discovery: Discovery? {
        get {
          return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
        }
      }

      public struct Discovery: GraphQLSelectionSet {
        public static let possibleTypes = ["Discovery"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geohashPrefix", type: .scalar(Int.self)),
          GraphQLField("discoveryId", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("cognitoUserName", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("price", type: .scalar(Int.self)),
          GraphQLField("request_or_offer", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("geoJson", type: .scalar(String.self)),
          GraphQLField("image_0", type: .scalar(String.self)),
          GraphQLField("image_1", type: .scalar(String.self)),
          GraphQLField("image_2", type: .scalar(String.self)),
          GraphQLField("image_3", type: .scalar(String.self)),
          GraphQLField("image_4", type: .scalar(String.self)),
          GraphQLField("image_5", type: .scalar(String.self)),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("latitude", type: .scalar(Double.self)),
          GraphQLField("longitude", type: .scalar(Double.self)),
          GraphQLField("isSaved", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
          self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// geo has prefix - used as the primary partition key
        public var geohashPrefix: Int? {
          get {
            return snapshot["geohashPrefix"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "geohashPrefix")
          }
        }

        /// id of the discovery, used as the primary sort key
        public var discoveryId: String? {
          get {
            return snapshot["discoveryId"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// Whether this discovery is on the network or not
        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        /// Username of the owner, same thing as cognitoId
        public var cognitoUserName: String? {
          get {
            return snapshot["cognitoUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "cognitoUserName")
          }
        }

        /// Description of the discovery
        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        /// Price of the discovery
        public var price: Int? {
          get {
            return snapshot["price"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "price")
          }
        }

        /// Is this a request or an offer
        public var requestOrOffer: String? {
          get {
            return snapshot["request_or_offer"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "request_or_offer")
          }
        }

        /// When this discovery was created, seconds from epoch
        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        /// Title of the discovery
        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        /// JSON Data that shows the positon of this discovery
        public var geoJson: String? {
          get {
            return snapshot["geoJson"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "geoJson")
          }
        }

        /// image 1
        public var image_0: String? {
          get {
            return snapshot["image_0"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_0")
          }
        }

        /// image 2
        public var image_1: String? {
          get {
            return snapshot["image_1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_1")
          }
        }

        /// image 3
        public var image_2: String? {
          get {
            return snapshot["image_2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_2")
          }
        }

        /// image 4
        public var image_3: String? {
          get {
            return snapshot["image_3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_3")
          }
        }

        /// image 5
        public var image_4: String? {
          get {
            return snapshot["image_4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_4")
          }
        }

        /// image 5
        public var image_5: String? {
          get {
            return snapshot["image_5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_5")
          }
        }

        /// Author of this discovery
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// Latitude of the discovery in degrees
        public var latitude: Double? {
          get {
            return snapshot["latitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        /// Longitude of the discovery in degrees
        public var longitude: Double? {
          get {
            return snapshot["longitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        /// checks to see if this discovery has been added to my saved discoveries or not
        public var isSaved: Bool? {
          get {
            return snapshot["isSaved"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSaved")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class RemoveSavedDiscoveryMutation: GraphQLMutation {
  public static let operationString =
    "mutation RemoveSavedDiscovery($discoveryId: String!) {\n  removeSavedDiscovery(discoveryId: $discoveryId) {\n    __typename\n    discoveryId\n    discovery {\n      __typename\n      geohashPrefix\n      discoveryId\n      active\n      cognitoUserName\n      description\n      price\n      request_or_offer\n      time\n      title\n      geoJson\n      image_0\n      image_1\n      image_2\n      image_3\n      image_4\n      image_5\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      latitude\n      longitude\n      isSaved\n    }\n  }\n}"

  public var discoveryId: String

  public init(discoveryId: String) {
    self.discoveryId = discoveryId
  }

  public var variables: GraphQLMap? {
    return ["discoveryId": discoveryId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("removeSavedDiscovery", arguments: ["discoveryId": GraphQLVariable("discoveryId")], type: .object(RemoveSavedDiscovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(removeSavedDiscovery: RemoveSavedDiscovery? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "removeSavedDiscovery": removeSavedDiscovery.flatMap { $0.snapshot }])
    }

    /// removes a saved discovery
    public var removeSavedDiscovery: RemoveSavedDiscovery? {
      get {
        return (snapshot["removeSavedDiscovery"] as? Snapshot).flatMap { RemoveSavedDiscovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "removeSavedDiscovery")
      }
    }

    public struct RemoveSavedDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["SavedDiscovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
        GraphQLField("discovery", type: .object(Discovery.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(discoveryId: String, discovery: Discovery? = nil) {
        self.init(snapshot: ["__typename": "SavedDiscovery", "discoveryId": discoveryId, "discovery": discovery.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var discoveryId: String {
        get {
          return snapshot["discoveryId"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      public var discovery: Discovery? {
        get {
          return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
        }
      }

      public struct Discovery: GraphQLSelectionSet {
        public static let possibleTypes = ["Discovery"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geohashPrefix", type: .scalar(Int.self)),
          GraphQLField("discoveryId", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("cognitoUserName", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("price", type: .scalar(Int.self)),
          GraphQLField("request_or_offer", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("geoJson", type: .scalar(String.self)),
          GraphQLField("image_0", type: .scalar(String.self)),
          GraphQLField("image_1", type: .scalar(String.self)),
          GraphQLField("image_2", type: .scalar(String.self)),
          GraphQLField("image_3", type: .scalar(String.self)),
          GraphQLField("image_4", type: .scalar(String.self)),
          GraphQLField("image_5", type: .scalar(String.self)),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("latitude", type: .scalar(Double.self)),
          GraphQLField("longitude", type: .scalar(Double.self)),
          GraphQLField("isSaved", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
          self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// geo has prefix - used as the primary partition key
        public var geohashPrefix: Int? {
          get {
            return snapshot["geohashPrefix"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "geohashPrefix")
          }
        }

        /// id of the discovery, used as the primary sort key
        public var discoveryId: String? {
          get {
            return snapshot["discoveryId"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// Whether this discovery is on the network or not
        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        /// Username of the owner, same thing as cognitoId
        public var cognitoUserName: String? {
          get {
            return snapshot["cognitoUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "cognitoUserName")
          }
        }

        /// Description of the discovery
        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        /// Price of the discovery
        public var price: Int? {
          get {
            return snapshot["price"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "price")
          }
        }

        /// Is this a request or an offer
        public var requestOrOffer: String? {
          get {
            return snapshot["request_or_offer"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "request_or_offer")
          }
        }

        /// When this discovery was created, seconds from epoch
        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        /// Title of the discovery
        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        /// JSON Data that shows the positon of this discovery
        public var geoJson: String? {
          get {
            return snapshot["geoJson"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "geoJson")
          }
        }

        /// image 1
        public var image_0: String? {
          get {
            return snapshot["image_0"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_0")
          }
        }

        /// image 2
        public var image_1: String? {
          get {
            return snapshot["image_1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_1")
          }
        }

        /// image 3
        public var image_2: String? {
          get {
            return snapshot["image_2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_2")
          }
        }

        /// image 4
        public var image_3: String? {
          get {
            return snapshot["image_3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_3")
          }
        }

        /// image 5
        public var image_4: String? {
          get {
            return snapshot["image_4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_4")
          }
        }

        /// image 5
        public var image_5: String? {
          get {
            return snapshot["image_5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_5")
          }
        }

        /// Author of this discovery
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// Latitude of the discovery in degrees
        public var latitude: Double? {
          get {
            return snapshot["latitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        /// Longitude of the discovery in degrees
        public var longitude: Double? {
          get {
            return snapshot["longitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        /// checks to see if this discovery has been added to my saved discoveries or not
        public var isSaved: Bool? {
          get {
            return snapshot["isSaved"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSaved")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class RetrieveStripeAccountQuery: GraphQLQuery {
  public static let operationString =
    "query RetrieveStripeAccount {\n  retrieveStripeAccount\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("retrieveStripeAccount", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(retrieveStripeAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "retrieveStripeAccount": retrieveStripeAccount])
    }

    /// Gets information about a user's own stripe connected account
    public var retrieveStripeAccount: String? {
      get {
        return snapshot["retrieveStripeAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "retrieveStripeAccount")
      }
    }
  }
}

public final class RetrieveExternalAccountQuery: GraphQLQuery {
  public static let operationString =
    "query RetrieveExternalAccount($id: String!) {\n  retrieveExternalAccount(id: $id)\n}"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("retrieveExternalAccount", arguments: ["id": GraphQLVariable("id")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(retrieveExternalAccount: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "retrieveExternalAccount": retrieveExternalAccount])
    }

    /// Gets information about a given external account
    public var retrieveExternalAccount: String? {
      get {
        return snapshot["retrieveExternalAccount"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "retrieveExternalAccount")
      }
    }
  }
}

public final class ListExternalAccountsQuery: GraphQLQuery {
  public static let operationString =
    "query ListExternalAccounts($type: ExternalAccountType, $limit: Int, $ending_before: String, $starting_after: String) {\n  listExternalAccounts(type: $type, limit: $limit, ending_before: $ending_before, starting_after: $starting_after)\n}"

  public var type: ExternalAccountType?
  public var limit: Int?
  public var ending_before: String?
  public var starting_after: String?

  public init(type: ExternalAccountType? = nil, limit: Int? = nil, ending_before: String? = nil, starting_after: String? = nil) {
    self.type = type
    self.limit = limit
    self.ending_before = ending_before
    self.starting_after = starting_after
  }

  public var variables: GraphQLMap? {
    return ["type": type, "limit": limit, "ending_before": ending_before, "starting_after": starting_after]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listExternalAccounts", arguments: ["type": GraphQLVariable("type"), "limit": GraphQLVariable("limit"), "ending_before": GraphQLVariable("ending_before"), "starting_after": GraphQLVariable("starting_after")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listExternalAccounts: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "listExternalAccounts": listExternalAccounts])
    }

    /// Lists external accounts of a connected user
    /// limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    /// ending_before: https://stripe.com/docs/api/external_account_bank_accounts/list?lang=node#account_list_bank_accounts-ending_before
    /// starting_after: https://stripe.com/docs/api/external_account_bank_accounts/list?lang=node#account_list_bank_accounts-starting_after
    public var listExternalAccounts: String? {
      get {
        return snapshot["listExternalAccounts"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "listExternalAccounts")
      }
    }
  }
}

public final class RetrieveBalanceQuery: GraphQLQuery {
  public static let operationString =
    "query RetrieveBalance {\n  retrieveBalance\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("retrieveBalance", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(retrieveBalance: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "retrieveBalance": retrieveBalance])
    }

    /// Returns this user's stripe account balance
    public var retrieveBalance: String? {
      get {
        return snapshot["retrieveBalance"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "retrieveBalance")
      }
    }
  }
}

public final class RetrieveStripeCustomerQuery: GraphQLQuery {
  public static let operationString =
    "query RetrieveStripeCustomer {\n  retrieveStripeCustomer\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("retrieveStripeCustomer", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(retrieveStripeCustomer: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "retrieveStripeCustomer": retrieveStripeCustomer])
    }

    /// Retrieves a customer account
    public var retrieveStripeCustomer: String? {
      get {
        return snapshot["retrieveStripeCustomer"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "retrieveStripeCustomer")
      }
    }
  }
}

public final class ListPaymentMethodsQuery: GraphQLQuery {
  public static let operationString =
    "query ListPaymentMethods($input: ListPaymentMethodsInput!) {\n  listPaymentMethods(input: $input)\n}"

  public var input: ListPaymentMethodsInput

  public init(input: ListPaymentMethodsInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listPaymentMethods", arguments: ["input": GraphQLVariable("input")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listPaymentMethods: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "listPaymentMethods": listPaymentMethods])
    }

    /// Lists paymentMethods
    public var listPaymentMethods: String? {
      get {
        return snapshot["listPaymentMethods"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "listPaymentMethods")
      }
    }
  }
}

public final class AllMessageQuery: GraphQLQuery {
  public static let operationString =
    "query AllMessage($after: String, $conversationId: ID!, $first: Int) {\n  allMessage(after: $after, conversationId: $conversationId, first: $first) {\n    __typename\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    content\n    conversationId\n    createdAt\n    id\n    isSent\n    recipient {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    sender\n  }\n}"

  public var after: String?
  public var conversationId: GraphQLID
  public var first: Int?

  public init(after: String? = nil, conversationId: GraphQLID, first: Int? = nil) {
    self.after = after
    self.conversationId = conversationId
    self.first = first
  }

  public var variables: GraphQLMap? {
    return ["after": after, "conversationId": conversationId, "first": first]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allMessage", arguments: ["after": GraphQLVariable("after"), "conversationId": GraphQLVariable("conversationId"), "first": GraphQLVariable("first")], type: .list(.object(AllMessage.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allMessage: [AllMessage?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "allMessage": allMessage.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Scan through all values of type 'Message'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnection' result to fetch pages.
    public var allMessage: [AllMessage?]? {
      get {
        return (snapshot["allMessage"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { AllMessage(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "allMessage")
      }
    }

    public struct AllMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("content", type: .nonNull(.scalar(String.self))),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSent", type: .scalar(Bool.self)),
        GraphQLField("recipient", type: .object(Recipient.selections)),
        GraphQLField("sender", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
        self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// The message content.
      public var content: String {
        get {
          return snapshot["content"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      /// The id of the Conversation this message belongs to. This is the table primary key.
      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      /// The message timestamp. This is also the table sort key.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// Generated id for a message -- read-only
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// Flag denoting if this message has been accepted by the server or not.
      public var isSent: Bool? {
        get {
          return snapshot["isSent"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSent")
        }
      }

      public var recipient: Recipient? {
        get {
          return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
        }
      }

      public var sender: String? {
        get {
          return snapshot["sender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sender")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }

      public struct Recipient: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AllMessageConnectionQuery: GraphQLQuery {
  public static let operationString =
    "query AllMessageConnection($after: String, $conversationId: ID!, $first: Int) {\n  allMessageConnection(after: $after, conversationId: $conversationId, first: $first) {\n    __typename\n    messages {\n      __typename\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      content\n      conversationId\n      createdAt\n      id\n      isSent\n      recipient {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      sender\n    }\n    nextToken\n  }\n}"

  public var after: String?
  public var conversationId: GraphQLID
  public var first: Int?

  public init(after: String? = nil, conversationId: GraphQLID, first: Int? = nil) {
    self.after = after
    self.conversationId = conversationId
    self.first = first
  }

  public var variables: GraphQLMap? {
    return ["after": after, "conversationId": conversationId, "first": first]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allMessageConnection", arguments: ["after": GraphQLVariable("after"), "conversationId": GraphQLVariable("conversationId"), "first": GraphQLVariable("first")], type: .object(AllMessageConnection.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allMessageConnection: AllMessageConnection? = nil) {
      self.init(snapshot: ["__typename": "Query", "allMessageConnection": allMessageConnection.flatMap { $0.snapshot }])
    }

    /// Scan through all values of type 'MessageConnection'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnectionConnection' result to fetch pages.
    public var allMessageConnection: AllMessageConnection? {
      get {
        return (snapshot["allMessageConnection"] as? Snapshot).flatMap { AllMessageConnection(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "allMessageConnection")
      }
    }

    public struct AllMessageConnection: GraphQLSelectionSet {
      public static let possibleTypes = ["MessageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("messages", type: .list(.object(Message.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(messages: [Message?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var messages: [Message?]? {
        get {
          return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSent", type: .scalar(Bool.self)),
          GraphQLField("recipient", type: .object(Recipient.selections)),
          GraphQLField("sender", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
          self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// The message content.
        public var content: String {
          get {
            return snapshot["content"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        /// The id of the Conversation this message belongs to. This is the table primary key.
        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        /// The message timestamp. This is also the table sort key.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// Generated id for a message -- read-only
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// Flag denoting if this message has been accepted by the server or not.
        public var isSent: Bool? {
          get {
            return snapshot["isSent"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSent")
          }
        }

        public var recipient: Recipient? {
          get {
            return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
          }
        }

        public var sender: String? {
          get {
            return snapshot["sender"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sender")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }

        public struct Recipient: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AllMessageFromQuery: GraphQLQuery {
  public static let operationString =
    "query AllMessageFrom($after: String, $conversationId: ID!, $first: Int, $sender: String!) {\n  allMessageFrom(after: $after, conversationId: $conversationId, first: $first, sender: $sender) {\n    __typename\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    content\n    conversationId\n    createdAt\n    id\n    isSent\n    recipient {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    sender\n  }\n}"

  public var after: String?
  public var conversationId: GraphQLID
  public var first: Int?
  public var sender: String

  public init(after: String? = nil, conversationId: GraphQLID, first: Int? = nil, sender: String) {
    self.after = after
    self.conversationId = conversationId
    self.first = first
    self.sender = sender
  }

  public var variables: GraphQLMap? {
    return ["after": after, "conversationId": conversationId, "first": first, "sender": sender]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allMessageFrom", arguments: ["after": GraphQLVariable("after"), "conversationId": GraphQLVariable("conversationId"), "first": GraphQLVariable("first"), "sender": GraphQLVariable("sender")], type: .list(.object(AllMessageFrom.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allMessageFrom: [AllMessageFrom?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "allMessageFrom": allMessageFrom.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    public var allMessageFrom: [AllMessageFrom?]? {
      get {
        return (snapshot["allMessageFrom"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { AllMessageFrom(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "allMessageFrom")
      }
    }

    public struct AllMessageFrom: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("content", type: .nonNull(.scalar(String.self))),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSent", type: .scalar(Bool.self)),
        GraphQLField("recipient", type: .object(Recipient.selections)),
        GraphQLField("sender", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
        self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// The message content.
      public var content: String {
        get {
          return snapshot["content"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      /// The id of the Conversation this message belongs to. This is the table primary key.
      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      /// The message timestamp. This is also the table sort key.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// Generated id for a message -- read-only
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// Flag denoting if this message has been accepted by the server or not.
      public var isSent: Bool? {
        get {
          return snapshot["isSent"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSent")
        }
      }

      public var recipient: Recipient? {
        get {
          return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
        }
      }

      public var sender: String? {
        get {
          return snapshot["sender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sender")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }

      public struct Recipient: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AllUserQuery: GraphQLQuery {
  public static let operationString =
    "query AllUser($after: String, $first: Int) {\n  allUser(after: $after, first: $first) {\n    __typename\n    username\n    conversations {\n      __typename\n      nextToken\n      userConversations {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n    }\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    registered\n    about\n    profilePic\n    rating\n    signUpDate\n    family_name\n    given_name\n    school\n    categories\n    hasChosenCategories\n  }\n}"

  public var after: String?
  public var first: Int?

  public init(after: String? = nil, first: Int? = nil) {
    self.after = after
    self.first = first
  }

  public var variables: GraphQLMap? {
    return ["after": after, "first": first]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allUser", arguments: ["after": GraphQLVariable("after"), "first": GraphQLVariable("first")], type: .list(.object(AllUser.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allUser: [AllUser?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "allUser": allUser.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Scan through all values of type 'User'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'UserConnection' result to fetch pages.
    public var allUser: [AllUser?]? {
      get {
        return (snapshot["allUser"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { AllUser(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "allUser")
      }
    }

    public struct AllUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("conversations", type: .object(Conversation.selections)),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("registered", type: .scalar(Bool.self)),
        GraphQLField("about", type: .scalar(String.self)),
        GraphQLField("profilePic", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(Double.self)),
        GraphQLField("signUpDate", type: .scalar(Double.self)),
        GraphQLField("family_name", type: .scalar(String.self)),
        GraphQLField("given_name", type: .scalar(String.self)),
        GraphQLField("school", type: .scalar(String.self)),
        GraphQLField("categories", type: .list(.scalar(String.self))),
        GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
        self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the user. (cognito id)
      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
      public var conversations: Conversation? {
        get {
          return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
        }
      }

      /// Get a users messages by querying a GSI on the Messages table.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Is the user registered?
      public var registered: Bool? {
        get {
          return snapshot["registered"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "registered")
        }
      }

      /// About section of a user
      public var about: String? {
        get {
          return snapshot["about"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "about")
        }
      }

      /// Link to the profile image of the user
      public var profilePic: String? {
        get {
          return snapshot["profilePic"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "profilePic")
        }
      }

      /// Rating of this user
      public var rating: Double? {
        get {
          return snapshot["rating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      /// Date that a user signed up on, represented in epoch time in milliseconds
      public var signUpDate: Double? {
        get {
          return snapshot["signUpDate"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "signUpDate")
        }
      }

      /// The last name of a user
      public var familyName: String? {
        get {
          return snapshot["family_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "family_name")
        }
      }

      /// The first name of a user
      public var givenName: String? {
        get {
          return snapshot["given_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "given_name")
        }
      }

      /// School the person attends
      public var school: String? {
        get {
          return snapshot["school"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "school")
        }
      }

      /// categories
      public var categories: [String?]? {
        get {
          return snapshot["categories"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "categories")
        }
      }

      /// Determines whether a person has already selected categories for the first time or not.
      public var hasChosenCategories: Bool? {
        get {
          return snapshot["hasChosenCategories"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "hasChosenCategories")
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConverstationsConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
          self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var userConversations: [UserConversation?]? {
          get {
            return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
          }
        }

        public struct UserConversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class MeQuery: GraphQLQuery {
  public static let operationString =
    "query Me {\n  me {\n    __typename\n    username\n    conversations {\n      __typename\n      nextToken\n      userConversations {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n    }\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    registered\n    about\n    profilePic\n    rating\n    signUpDate\n    family_name\n    given_name\n    school\n    categories\n    hasChosenCategories\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("me", type: .object(Me.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(me: Me? = nil) {
      self.init(snapshot: ["__typename": "Query", "me": me.flatMap { $0.snapshot }])
    }

    /// Get information about myself
    public var me: Me? {
      get {
        return (snapshot["me"] as? Snapshot).flatMap { Me(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "me")
      }
    }

    public struct Me: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("conversations", type: .object(Conversation.selections)),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("registered", type: .scalar(Bool.self)),
        GraphQLField("about", type: .scalar(String.self)),
        GraphQLField("profilePic", type: .scalar(String.self)),
        GraphQLField("rating", type: .scalar(Double.self)),
        GraphQLField("signUpDate", type: .scalar(Double.self)),
        GraphQLField("family_name", type: .scalar(String.self)),
        GraphQLField("given_name", type: .scalar(String.self)),
        GraphQLField("school", type: .scalar(String.self)),
        GraphQLField("categories", type: .list(.scalar(String.self))),
        GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
        self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the user. (cognito id)
      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
      public var conversations: Conversation? {
        get {
          return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
        }
      }

      /// Get a users messages by querying a GSI on the Messages table.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Is the user registered?
      public var registered: Bool? {
        get {
          return snapshot["registered"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "registered")
        }
      }

      /// About section of a user
      public var about: String? {
        get {
          return snapshot["about"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "about")
        }
      }

      /// Link to the profile image of the user
      public var profilePic: String? {
        get {
          return snapshot["profilePic"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "profilePic")
        }
      }

      /// Rating of this user
      public var rating: Double? {
        get {
          return snapshot["rating"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "rating")
        }
      }

      /// Date that a user signed up on, represented in epoch time in milliseconds
      public var signUpDate: Double? {
        get {
          return snapshot["signUpDate"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "signUpDate")
        }
      }

      /// The last name of a user
      public var familyName: String? {
        get {
          return snapshot["family_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "family_name")
        }
      }

      /// The first name of a user
      public var givenName: String? {
        get {
          return snapshot["given_name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "given_name")
        }
      }

      /// School the person attends
      public var school: String? {
        get {
          return snapshot["school"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "school")
        }
      }

      /// categories
      public var categories: [String?]? {
        get {
          return snapshot["categories"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "categories")
        }
      }

      /// Determines whether a person has already selected categories for the first time or not.
      public var hasChosenCategories: Bool? {
        get {
          return snapshot["hasChosenCategories"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "hasChosenCategories")
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConverstationsConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
          self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var userConversations: [UserConversation?]? {
          get {
            return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
          }
        }

        public struct UserConversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ConversationFromDiscoveryQuery: GraphQLQuery {
  public static let operationString =
    "query ConversationFromDiscovery($discoveryId: String!) {\n  conversationFromDiscovery(discoveryId: $discoveryId) {\n    __typename\n    createdAt\n    id\n    discoveryId\n    messages {\n      __typename\n      messages {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      nextToken\n    }\n    latestMessage {\n      __typename\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      content\n      conversationId\n      createdAt\n      id\n      isSent\n      recipient {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      sender\n    }\n    discovery {\n      __typename\n      geohashPrefix\n      discoveryId\n      active\n      cognitoUserName\n      description\n      price\n      request_or_offer\n      time\n      title\n      geoJson\n      image_0\n      image_1\n      image_2\n      image_3\n      image_4\n      image_5\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      latitude\n      longitude\n      isSaved\n    }\n    authorUserName\n  }\n}"

  public var discoveryId: String

  public init(discoveryId: String) {
    self.discoveryId = discoveryId
  }

  public var variables: GraphQLMap? {
    return ["discoveryId": discoveryId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("conversationFromDiscovery", arguments: ["discoveryId": GraphQLVariable("discoveryId")], type: .object(ConversationFromDiscovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(conversationFromDiscovery: ConversationFromDiscovery? = nil) {
      self.init(snapshot: ["__typename": "Query", "conversationFromDiscovery": conversationFromDiscovery.flatMap { $0.snapshot }])
    }

    /// Given a discovery id, check to see if a user has already started a convo over it or not. The user sending this request is the one inquiring about a discovery, not the author of the discovery.
    public var conversationFromDiscovery: ConversationFromDiscovery? {
      get {
        return (snapshot["conversationFromDiscovery"] as? Snapshot).flatMap { ConversationFromDiscovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "conversationFromDiscovery")
      }
    }

    public struct ConversationFromDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Conversation"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
        GraphQLField("messages", type: .object(Message.selections)),
        GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
        GraphQLField("discovery", type: .object(Discovery.selections)),
        GraphQLField("authorUserName", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
        self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The Conversation's timestamp.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// A unique identifier for the Conversation.
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// The Conversation's discoveryId. (formerly known as name)
      public var discoveryId: String {
        get {
          return snapshot["discoveryId"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// The Conversation's messages.
      public var messages: Message? {
        get {
          return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "messages")
        }
      }

      /// Latest message of a conversation
      public var latestMessage: LatestMessage? {
        get {
          return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
        }
      }

      /// Discovery related to the conversation
      public var discovery: Discovery? {
        get {
          return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
        }
      }

      /// Username of the person that started this conversation
      public var authorUserName: String? {
        get {
          return snapshot["authorUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "authorUserName")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["MessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .list(.object(Message.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(messages: [Message?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var messages: [Message?]? {
          get {
            return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct LatestMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("isSent", type: .scalar(Bool.self)),
          GraphQLField("recipient", type: .object(Recipient.selections)),
          GraphQLField("sender", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
          self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// The message content.
        public var content: String {
          get {
            return snapshot["content"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        /// The id of the Conversation this message belongs to. This is the table primary key.
        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        /// The message timestamp. This is also the table sort key.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// Generated id for a message -- read-only
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// Flag denoting if this message has been accepted by the server or not.
        public var isSent: Bool? {
          get {
            return snapshot["isSent"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSent")
          }
        }

        public var recipient: Recipient? {
          get {
            return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
          }
        }

        public var sender: String? {
          get {
            return snapshot["sender"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sender")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }

        public struct Recipient: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }

      public struct Discovery: GraphQLSelectionSet {
        public static let possibleTypes = ["Discovery"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geohashPrefix", type: .scalar(Int.self)),
          GraphQLField("discoveryId", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("cognitoUserName", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("price", type: .scalar(Int.self)),
          GraphQLField("request_or_offer", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("geoJson", type: .scalar(String.self)),
          GraphQLField("image_0", type: .scalar(String.self)),
          GraphQLField("image_1", type: .scalar(String.self)),
          GraphQLField("image_2", type: .scalar(String.self)),
          GraphQLField("image_3", type: .scalar(String.self)),
          GraphQLField("image_4", type: .scalar(String.self)),
          GraphQLField("image_5", type: .scalar(String.self)),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("latitude", type: .scalar(Double.self)),
          GraphQLField("longitude", type: .scalar(Double.self)),
          GraphQLField("isSaved", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
          self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// geo has prefix - used as the primary partition key
        public var geohashPrefix: Int? {
          get {
            return snapshot["geohashPrefix"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "geohashPrefix")
          }
        }

        /// id of the discovery, used as the primary sort key
        public var discoveryId: String? {
          get {
            return snapshot["discoveryId"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// Whether this discovery is on the network or not
        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        /// Username of the owner, same thing as cognitoId
        public var cognitoUserName: String? {
          get {
            return snapshot["cognitoUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "cognitoUserName")
          }
        }

        /// Description of the discovery
        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        /// Price of the discovery
        public var price: Int? {
          get {
            return snapshot["price"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "price")
          }
        }

        /// Is this a request or an offer
        public var requestOrOffer: String? {
          get {
            return snapshot["request_or_offer"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "request_or_offer")
          }
        }

        /// When this discovery was created, seconds from epoch
        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        /// Title of the discovery
        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        /// JSON Data that shows the positon of this discovery
        public var geoJson: String? {
          get {
            return snapshot["geoJson"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "geoJson")
          }
        }

        /// image 1
        public var image_0: String? {
          get {
            return snapshot["image_0"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_0")
          }
        }

        /// image 2
        public var image_1: String? {
          get {
            return snapshot["image_1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_1")
          }
        }

        /// image 3
        public var image_2: String? {
          get {
            return snapshot["image_2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_2")
          }
        }

        /// image 4
        public var image_3: String? {
          get {
            return snapshot["image_3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_3")
          }
        }

        /// image 5
        public var image_4: String? {
          get {
            return snapshot["image_4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_4")
          }
        }

        /// image 5
        public var image_5: String? {
          get {
            return snapshot["image_5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_5")
          }
        }

        /// Author of this discovery
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// Latitude of the discovery in degrees
        public var latitude: Double? {
          get {
            return snapshot["latitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        /// Longitude of the discovery in degrees
        public var longitude: Double? {
          get {
            return snapshot["longitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        /// checks to see if this discovery has been added to my saved discoveries or not
        public var isSaved: Bool? {
          get {
            return snapshot["isSaved"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSaved")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AllAssociatedQuery: GraphQLQuery {
  public static let operationString =
    "query AllAssociated($conversationId: String!) {\n  allAssociated(conversationId: $conversationId) {\n    __typename\n    associated {\n      __typename\n      associated {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n      conversation {\n        __typename\n        createdAt\n        id\n        discoveryId\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        latestMessage {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        discovery {\n          __typename\n          geohashPrefix\n          discoveryId\n          active\n          cognitoUserName\n          description\n          price\n          request_or_offer\n          time\n          title\n          geoJson\n          image_0\n          image_1\n          image_2\n          image_3\n          image_4\n          image_5\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          latitude\n          longitude\n          isSaved\n        }\n        authorUserName\n      }\n      conversationId\n      user {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      username\n    }\n    conversation {\n      __typename\n      createdAt\n      id\n      discoveryId\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      latestMessage {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      discovery {\n        __typename\n        geohashPrefix\n        discoveryId\n        active\n        cognitoUserName\n        description\n        price\n        request_or_offer\n        time\n        title\n        geoJson\n        image_0\n        image_1\n        image_2\n        image_3\n        image_4\n        image_5\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        latitude\n        longitude\n        isSaved\n      }\n      authorUserName\n    }\n    conversationId\n    user {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    username\n  }\n}"

  public var conversationId: String

  public init(conversationId: String) {
    self.conversationId = conversationId
  }

  public var variables: GraphQLMap? {
    return ["conversationId": conversationId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allAssociated", arguments: ["conversationId": GraphQLVariable("conversationId")], type: .list(.object(AllAssociated.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allAssociated: [AllAssociated?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "allAssociated": allAssociated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Given a conversation id, fetch the associated user conversations
    public var allAssociated: [AllAssociated?]? {
      get {
        return (snapshot["allAssociated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { AllAssociated(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "allAssociated")
      }
    }

    public struct AllAssociated: GraphQLSelectionSet {
      public static let possibleTypes = ["UserConversations"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("associated", type: .list(.object(Associated.selections))),
        GraphQLField("conversation", type: .object(Conversation.selections)),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
        self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var associated: [Associated?]? {
        get {
          return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
        }
      }

      public var conversation: Conversation? {
        get {
          return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
        }
      }

      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      public struct Associated: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConversations"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("associated", type: .list(.object(Associated.selections))),
          GraphQLField("conversation", type: .object(Conversation.selections)),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
          self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var associated: [Associated?]? {
          get {
            return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
          }
        }

        public var conversation: Conversation? {
          get {
            return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
          }
        }

        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        public var user: User? {
          get {
            return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "user")
          }
        }

        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        public struct Associated: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["Conversation"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
            GraphQLField("discovery", type: .object(Discovery.selections)),
            GraphQLField("authorUserName", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
            self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The Conversation's timestamp.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// A unique identifier for the Conversation.
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// The Conversation's discoveryId. (formerly known as name)
          public var discoveryId: String {
            get {
              return snapshot["discoveryId"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// The Conversation's messages.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Latest message of a conversation
          public var latestMessage: LatestMessage? {
            get {
              return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
            }
          }

          /// Discovery related to the conversation
          public var discovery: Discovery? {
            get {
              return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
            }
          }

          /// Username of the person that started this conversation
          public var authorUserName: String? {
            get {
              return snapshot["authorUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "authorUserName")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct LatestMessage: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Discovery: GraphQLSelectionSet {
            public static let possibleTypes = ["Discovery"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("geohashPrefix", type: .scalar(Int.self)),
              GraphQLField("discoveryId", type: .scalar(String.self)),
              GraphQLField("active", type: .scalar(Bool.self)),
              GraphQLField("cognitoUserName", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
              GraphQLField("request_or_offer", type: .scalar(String.self)),
              GraphQLField("time", type: .scalar(Int.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("geoJson", type: .scalar(String.self)),
              GraphQLField("image_0", type: .scalar(String.self)),
              GraphQLField("image_1", type: .scalar(String.self)),
              GraphQLField("image_2", type: .scalar(String.self)),
              GraphQLField("image_3", type: .scalar(String.self)),
              GraphQLField("image_4", type: .scalar(String.self)),
              GraphQLField("image_5", type: .scalar(String.self)),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("latitude", type: .scalar(Double.self)),
              GraphQLField("longitude", type: .scalar(Double.self)),
              GraphQLField("isSaved", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
              self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// geo has prefix - used as the primary partition key
            public var geohashPrefix: Int? {
              get {
                return snapshot["geohashPrefix"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "geohashPrefix")
              }
            }

            /// id of the discovery, used as the primary sort key
            public var discoveryId: String? {
              get {
                return snapshot["discoveryId"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// Whether this discovery is on the network or not
            public var active: Bool? {
              get {
                return snapshot["active"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "active")
              }
            }

            /// Username of the owner, same thing as cognitoId
            public var cognitoUserName: String? {
              get {
                return snapshot["cognitoUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "cognitoUserName")
              }
            }

            /// Description of the discovery
            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            /// Price of the discovery
            public var price: Int? {
              get {
                return snapshot["price"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "price")
              }
            }

            /// Is this a request or an offer
            public var requestOrOffer: String? {
              get {
                return snapshot["request_or_offer"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "request_or_offer")
              }
            }

            /// When this discovery was created, seconds from epoch
            public var time: Int? {
              get {
                return snapshot["time"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "time")
              }
            }

            /// Title of the discovery
            public var title: String? {
              get {
                return snapshot["title"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "title")
              }
            }

            /// JSON Data that shows the positon of this discovery
            public var geoJson: String? {
              get {
                return snapshot["geoJson"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "geoJson")
              }
            }

            /// image 1
            public var image_0: String? {
              get {
                return snapshot["image_0"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_0")
              }
            }

            /// image 2
            public var image_1: String? {
              get {
                return snapshot["image_1"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_1")
              }
            }

            /// image 3
            public var image_2: String? {
              get {
                return snapshot["image_2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_2")
              }
            }

            /// image 4
            public var image_3: String? {
              get {
                return snapshot["image_3"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_3")
              }
            }

            /// image 5
            public var image_4: String? {
              get {
                return snapshot["image_4"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_4")
              }
            }

            /// image 5
            public var image_5: String? {
              get {
                return snapshot["image_5"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_5")
              }
            }

            /// Author of this discovery
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// Latitude of the discovery in degrees
            public var latitude: Double? {
              get {
                return snapshot["latitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "latitude")
              }
            }

            /// Longitude of the discovery in degrees
            public var longitude: Double? {
              get {
                return snapshot["longitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "longitude")
              }
            }

            /// checks to see if this discovery has been added to my saved discoveries or not
            public var isSaved: Bool? {
              get {
                return snapshot["isSaved"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSaved")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["Conversation"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
          GraphQLField("discovery", type: .object(Discovery.selections)),
          GraphQLField("authorUserName", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
          self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The Conversation's timestamp.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// A unique identifier for the Conversation.
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// The Conversation's discoveryId. (formerly known as name)
        public var discoveryId: String {
          get {
            return snapshot["discoveryId"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// The Conversation's messages.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Latest message of a conversation
        public var latestMessage: LatestMessage? {
          get {
            return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
          }
        }

        /// Discovery related to the conversation
        public var discovery: Discovery? {
          get {
            return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
          }
        }

        /// Username of the person that started this conversation
        public var authorUserName: String? {
          get {
            return snapshot["authorUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorUserName")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct LatestMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Discovery: GraphQLSelectionSet {
          public static let possibleTypes = ["Discovery"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("geohashPrefix", type: .scalar(Int.self)),
            GraphQLField("discoveryId", type: .scalar(String.self)),
            GraphQLField("active", type: .scalar(Bool.self)),
            GraphQLField("cognitoUserName", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
            GraphQLField("request_or_offer", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("geoJson", type: .scalar(String.self)),
            GraphQLField("image_0", type: .scalar(String.self)),
            GraphQLField("image_1", type: .scalar(String.self)),
            GraphQLField("image_2", type: .scalar(String.self)),
            GraphQLField("image_3", type: .scalar(String.self)),
            GraphQLField("image_4", type: .scalar(String.self)),
            GraphQLField("image_5", type: .scalar(String.self)),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("latitude", type: .scalar(Double.self)),
            GraphQLField("longitude", type: .scalar(Double.self)),
            GraphQLField("isSaved", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
            self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// geo has prefix - used as the primary partition key
          public var geohashPrefix: Int? {
            get {
              return snapshot["geohashPrefix"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "geohashPrefix")
            }
          }

          /// id of the discovery, used as the primary sort key
          public var discoveryId: String? {
            get {
              return snapshot["discoveryId"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// Whether this discovery is on the network or not
          public var active: Bool? {
            get {
              return snapshot["active"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "active")
            }
          }

          /// Username of the owner, same thing as cognitoId
          public var cognitoUserName: String? {
            get {
              return snapshot["cognitoUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "cognitoUserName")
            }
          }

          /// Description of the discovery
          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          /// Price of the discovery
          public var price: Int? {
            get {
              return snapshot["price"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "price")
            }
          }

          /// Is this a request or an offer
          public var requestOrOffer: String? {
            get {
              return snapshot["request_or_offer"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "request_or_offer")
            }
          }

          /// When this discovery was created, seconds from epoch
          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          /// Title of the discovery
          public var title: String? {
            get {
              return snapshot["title"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "title")
            }
          }

          /// JSON Data that shows the positon of this discovery
          public var geoJson: String? {
            get {
              return snapshot["geoJson"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "geoJson")
            }
          }

          /// image 1
          public var image_0: String? {
            get {
              return snapshot["image_0"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_0")
            }
          }

          /// image 2
          public var image_1: String? {
            get {
              return snapshot["image_1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_1")
            }
          }

          /// image 3
          public var image_2: String? {
            get {
              return snapshot["image_2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_2")
            }
          }

          /// image 4
          public var image_3: String? {
            get {
              return snapshot["image_3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_3")
            }
          }

          /// image 5
          public var image_4: String? {
            get {
              return snapshot["image_4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_4")
            }
          }

          /// image 5
          public var image_5: String? {
            get {
              return snapshot["image_5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_5")
            }
          }

          /// Author of this discovery
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// Latitude of the discovery in degrees
          public var latitude: Double? {
            get {
              return snapshot["latitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "latitude")
            }
          }

          /// Longitude of the discovery in degrees
          public var longitude: Double? {
            get {
              return snapshot["longitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "longitude")
            }
          }

          /// checks to see if this discovery has been added to my saved discoveries or not
          public var isSaved: Bool? {
            get {
              return snapshot["isSaved"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSaved")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DiscoveryQuery: GraphQLQuery {
  public static let operationString =
    "query Discovery($discoveryId: String!) {\n  discovery(discoveryId: $discoveryId) {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public var discoveryId: String

  public init(discoveryId: String) {
    self.discoveryId = discoveryId
  }

  public var variables: GraphQLMap? {
    return ["discoveryId": discoveryId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("discovery", arguments: ["discoveryId": GraphQLVariable("discoveryId")], type: .object(Discovery.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(discovery: Discovery? = nil) {
      self.init(snapshot: ["__typename": "Query", "discovery": discovery.flatMap { $0.snapshot }])
    }

    /// Given a discovery id, fetch all of the info related to the discovery
    public var discovery: Discovery? {
      get {
        return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
      }
    }

    public struct Discovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetMyDiscoveriesQuery: GraphQLQuery {
  public static let operationString =
    "query GetMyDiscoveries {\n  getMyDiscoveries {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMyDiscoveries", type: .list(.object(GetMyDiscovery.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMyDiscoveries: [GetMyDiscovery?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMyDiscoveries": getMyDiscoveries.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Fetch all of my own discoveries
    public var getMyDiscoveries: [GetMyDiscovery?]? {
      get {
        return (snapshot["getMyDiscoveries"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { GetMyDiscovery(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "getMyDiscoveries")
      }
    }

    public struct GetMyDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetSurroundingDiscoveriesQuery: GraphQLQuery {
  public static let operationString =
    "query GetSurroundingDiscoveries($latMin: Float, $latMax: Float, $longMin: Float, $longMax: Float) {\n  getSurroundingDiscoveries(latMin: $latMin, latMax: $latMax, longMin: $longMin, longMax: $longMax) {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public var latMin: Double?
  public var latMax: Double?
  public var longMin: Double?
  public var longMax: Double?

  public init(latMin: Double? = nil, latMax: Double? = nil, longMin: Double? = nil, longMax: Double? = nil) {
    self.latMin = latMin
    self.latMax = latMax
    self.longMin = longMin
    self.longMax = longMax
  }

  public var variables: GraphQLMap? {
    return ["latMin": latMin, "latMax": latMax, "longMin": longMin, "longMax": longMax]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getSurroundingDiscoveries", arguments: ["latMin": GraphQLVariable("latMin"), "latMax": GraphQLVariable("latMax"), "longMin": GraphQLVariable("longMin"), "longMax": GraphQLVariable("longMax")], type: .list(.object(GetSurroundingDiscovery.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getSurroundingDiscoveries: [GetSurroundingDiscovery?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "getSurroundingDiscoveries": getSurroundingDiscoveries.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Get the discoveries inside a location defined by a bounded box
    public var getSurroundingDiscoveries: [GetSurroundingDiscovery?]? {
      get {
        return (snapshot["getSurroundingDiscoveries"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { GetSurroundingDiscovery(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "getSurroundingDiscoveries")
      }
    }

    public struct GetSurroundingDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AutocompleteQuery: GraphQLQuery {
  public static let operationString =
    "query Autocomplete($keyword: String) {\n  autocomplete(keyword: $keyword)\n}"

  public var keyword: String?

  public init(keyword: String? = nil) {
    self.keyword = keyword
  }

  public var variables: GraphQLMap? {
    return ["keyword": keyword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("autocomplete", arguments: ["keyword": GraphQLVariable("keyword")], type: .list(.scalar(String.self))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(autocomplete: [String?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "autocomplete": autocomplete])
    }

    /// Used for the autocomplete functionality when searching discoveries.
    public var autocomplete: [String?]? {
      get {
        return snapshot["autocomplete"] as? [String?]
      }
      set {
        snapshot.updateValue(newValue, forKey: "autocomplete")
      }
    }
  }
}

public final class SearchQuery: GraphQLQuery {
  public static let operationString =
    "query Search($keyword: String) {\n  search(keyword: $keyword) {\n    __typename\n    geohashPrefix\n    discoveryId\n    active\n    cognitoUserName\n    description\n    price\n    request_or_offer\n    time\n    title\n    geoJson\n    image_0\n    image_1\n    image_2\n    image_3\n    image_4\n    image_5\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    latitude\n    longitude\n    isSaved\n  }\n}"

  public var keyword: String?

  public init(keyword: String? = nil) {
    self.keyword = keyword
  }

  public var variables: GraphQLMap? {
    return ["keyword": keyword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("search", arguments: ["keyword": GraphQLVariable("keyword")], type: .list(.object(Search.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(search: [Search?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "search": search.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Used to get search results for related discoveries when searching (It only returns the id, title, description and tags for now, so induvidual calls must be made to fetch complete information)
    public var search: [Search?]? {
      get {
        return (snapshot["search"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Search(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "search")
      }
    }

    public struct Search: GraphQLSelectionSet {
      public static let possibleTypes = ["Discovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("geohashPrefix", type: .scalar(Int.self)),
        GraphQLField("discoveryId", type: .scalar(String.self)),
        GraphQLField("active", type: .scalar(Bool.self)),
        GraphQLField("cognitoUserName", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("price", type: .scalar(Int.self)),
        GraphQLField("request_or_offer", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("geoJson", type: .scalar(String.self)),
        GraphQLField("image_0", type: .scalar(String.self)),
        GraphQLField("image_1", type: .scalar(String.self)),
        GraphQLField("image_2", type: .scalar(String.self)),
        GraphQLField("image_3", type: .scalar(String.self)),
        GraphQLField("image_4", type: .scalar(String.self)),
        GraphQLField("image_5", type: .scalar(String.self)),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("latitude", type: .scalar(Double.self)),
        GraphQLField("longitude", type: .scalar(Double.self)),
        GraphQLField("isSaved", type: .scalar(Bool.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
        self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// geo has prefix - used as the primary partition key
      public var geohashPrefix: Int? {
        get {
          return snapshot["geohashPrefix"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "geohashPrefix")
        }
      }

      /// id of the discovery, used as the primary sort key
      public var discoveryId: String? {
        get {
          return snapshot["discoveryId"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      /// Whether this discovery is on the network or not
      public var active: Bool? {
        get {
          return snapshot["active"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "active")
        }
      }

      /// Username of the owner, same thing as cognitoId
      public var cognitoUserName: String? {
        get {
          return snapshot["cognitoUserName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "cognitoUserName")
        }
      }

      /// Description of the discovery
      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      /// Price of the discovery
      public var price: Int? {
        get {
          return snapshot["price"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "price")
        }
      }

      /// Is this a request or an offer
      public var requestOrOffer: String? {
        get {
          return snapshot["request_or_offer"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "request_or_offer")
        }
      }

      /// When this discovery was created, seconds from epoch
      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      /// Title of the discovery
      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      /// JSON Data that shows the positon of this discovery
      public var geoJson: String? {
        get {
          return snapshot["geoJson"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "geoJson")
        }
      }

      /// image 1
      public var image_0: String? {
        get {
          return snapshot["image_0"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_0")
        }
      }

      /// image 2
      public var image_1: String? {
        get {
          return snapshot["image_1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_1")
        }
      }

      /// image 3
      public var image_2: String? {
        get {
          return snapshot["image_2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_2")
        }
      }

      /// image 4
      public var image_3: String? {
        get {
          return snapshot["image_3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_3")
        }
      }

      /// image 5
      public var image_4: String? {
        get {
          return snapshot["image_4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_4")
        }
      }

      /// image 5
      public var image_5: String? {
        get {
          return snapshot["image_5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image_5")
        }
      }

      /// Author of this discovery
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// Latitude of the discovery in degrees
      public var latitude: Double? {
        get {
          return snapshot["latitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "latitude")
        }
      }

      /// Longitude of the discovery in degrees
      public var longitude: Double? {
        get {
          return snapshot["longitude"] as? Double
        }
        set {
          snapshot.updateValue(newValue, forKey: "longitude")
        }
      }

      /// checks to see if this discovery has been added to my saved discoveries or not
      public var isSaved: Bool? {
        get {
          return snapshot["isSaved"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSaved")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class AllSavedDiscoveriesQuery: GraphQLQuery {
  public static let operationString =
    "query AllSavedDiscoveries {\n  allSavedDiscoveries {\n    __typename\n    discoveryId\n    discovery {\n      __typename\n      geohashPrefix\n      discoveryId\n      active\n      cognitoUserName\n      description\n      price\n      request_or_offer\n      time\n      title\n      geoJson\n      image_0\n      image_1\n      image_2\n      image_3\n      image_4\n      image_5\n      author {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      latitude\n      longitude\n      isSaved\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("allSavedDiscoveries", type: .list(.object(AllSavedDiscovery.selections))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(allSavedDiscoveries: [AllSavedDiscovery?]? = nil) {
      self.init(snapshot: ["__typename": "Query", "allSavedDiscoveries": allSavedDiscoveries.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
    }

    /// Fetch all of my saved discoveries
    public var allSavedDiscoveries: [AllSavedDiscovery?]? {
      get {
        return (snapshot["allSavedDiscoveries"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { AllSavedDiscovery(snapshot: $0) } } }
      }
      set {
        snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "allSavedDiscoveries")
      }
    }

    public struct AllSavedDiscovery: GraphQLSelectionSet {
      public static let possibleTypes = ["SavedDiscovery"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
        GraphQLField("discovery", type: .object(Discovery.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(discoveryId: String, discovery: Discovery? = nil) {
        self.init(snapshot: ["__typename": "SavedDiscovery", "discoveryId": discoveryId, "discovery": discovery.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var discoveryId: String {
        get {
          return snapshot["discoveryId"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "discoveryId")
        }
      }

      public var discovery: Discovery? {
        get {
          return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
        }
      }

      public struct Discovery: GraphQLSelectionSet {
        public static let possibleTypes = ["Discovery"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geohashPrefix", type: .scalar(Int.self)),
          GraphQLField("discoveryId", type: .scalar(String.self)),
          GraphQLField("active", type: .scalar(Bool.self)),
          GraphQLField("cognitoUserName", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("price", type: .scalar(Int.self)),
          GraphQLField("request_or_offer", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("geoJson", type: .scalar(String.self)),
          GraphQLField("image_0", type: .scalar(String.self)),
          GraphQLField("image_1", type: .scalar(String.self)),
          GraphQLField("image_2", type: .scalar(String.self)),
          GraphQLField("image_3", type: .scalar(String.self)),
          GraphQLField("image_4", type: .scalar(String.self)),
          GraphQLField("image_5", type: .scalar(String.self)),
          GraphQLField("author", type: .object(Author.selections)),
          GraphQLField("latitude", type: .scalar(Double.self)),
          GraphQLField("longitude", type: .scalar(Double.self)),
          GraphQLField("isSaved", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
          self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// geo has prefix - used as the primary partition key
        public var geohashPrefix: Int? {
          get {
            return snapshot["geohashPrefix"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "geohashPrefix")
          }
        }

        /// id of the discovery, used as the primary sort key
        public var discoveryId: String? {
          get {
            return snapshot["discoveryId"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// Whether this discovery is on the network or not
        public var active: Bool? {
          get {
            return snapshot["active"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "active")
          }
        }

        /// Username of the owner, same thing as cognitoId
        public var cognitoUserName: String? {
          get {
            return snapshot["cognitoUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "cognitoUserName")
          }
        }

        /// Description of the discovery
        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        /// Price of the discovery
        public var price: Int? {
          get {
            return snapshot["price"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "price")
          }
        }

        /// Is this a request or an offer
        public var requestOrOffer: String? {
          get {
            return snapshot["request_or_offer"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "request_or_offer")
          }
        }

        /// When this discovery was created, seconds from epoch
        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        /// Title of the discovery
        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        /// JSON Data that shows the positon of this discovery
        public var geoJson: String? {
          get {
            return snapshot["geoJson"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "geoJson")
          }
        }

        /// image 1
        public var image_0: String? {
          get {
            return snapshot["image_0"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_0")
          }
        }

        /// image 2
        public var image_1: String? {
          get {
            return snapshot["image_1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_1")
          }
        }

        /// image 3
        public var image_2: String? {
          get {
            return snapshot["image_2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_2")
          }
        }

        /// image 4
        public var image_3: String? {
          get {
            return snapshot["image_3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_3")
          }
        }

        /// image 5
        public var image_4: String? {
          get {
            return snapshot["image_4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_4")
          }
        }

        /// image 5
        public var image_5: String? {
          get {
            return snapshot["image_5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image_5")
          }
        }

        /// Author of this discovery
        public var author: Author? {
          get {
            return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "author")
          }
        }

        /// Latitude of the discovery in degrees
        public var latitude: Double? {
          get {
            return snapshot["latitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "latitude")
          }
        }

        /// Longitude of the discovery in degrees
        public var longitude: Double? {
          get {
            return snapshot["longitude"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "longitude")
          }
        }

        /// checks to see if this discovery has been added to my saved discoveries or not
        public var isSaved: Bool? {
          get {
            return snapshot["isSaved"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isSaved")
          }
        }

        public struct Author: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SubscribeToNewMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription SubscribeToNewMessage($conversationId: ID!) {\n  subscribeToNewMessage(conversationId: $conversationId) {\n    __typename\n    author {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    content\n    conversationId\n    createdAt\n    id\n    isSent\n    recipient {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    sender\n  }\n}"

  public var conversationId: GraphQLID

  public init(conversationId: GraphQLID) {
    self.conversationId = conversationId
  }

  public var variables: GraphQLMap? {
    return ["conversationId": conversationId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("subscribeToNewMessage", arguments: ["conversationId": GraphQLVariable("conversationId")], type: .object(SubscribeToNewMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(subscribeToNewMessage: SubscribeToNewMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "subscribeToNewMessage": subscribeToNewMessage.flatMap { $0.snapshot }])
    }

    /// Subscribes to all new messages in a given Conversation.
    public var subscribeToNewMessage: SubscribeToNewMessage? {
      get {
        return (snapshot["subscribeToNewMessage"] as? Snapshot).flatMap { SubscribeToNewMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "subscribeToNewMessage")
      }
    }

    public struct SubscribeToNewMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("author", type: .object(Author.selections)),
        GraphQLField("content", type: .nonNull(.scalar(String.self))),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("createdAt", type: .scalar(Int.self)),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("isSent", type: .scalar(Bool.self)),
        GraphQLField("recipient", type: .object(Recipient.selections)),
        GraphQLField("sender", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
        self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
      public var author: Author? {
        get {
          return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "author")
        }
      }

      /// The message content.
      public var content: String {
        get {
          return snapshot["content"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      /// The id of the Conversation this message belongs to. This is the table primary key.
      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      /// The message timestamp. This is also the table sort key.
      public var createdAt: Int? {
        get {
          return snapshot["createdAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// Generated id for a message -- read-only
      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      /// Flag denoting if this message has been accepted by the server or not.
      public var isSent: Bool? {
        get {
          return snapshot["isSent"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isSent")
        }
      }

      public var recipient: Recipient? {
        get {
          return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
        }
      }

      public var sender: String? {
        get {
          return snapshot["sender"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sender")
        }
      }

      public struct Author: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }

      public struct Recipient: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class SubscribeToNewUCsSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription SubscribeToNewUCs($username: ID!) {\n  subscribeToNewUCs(username: $username) {\n    __typename\n    associated {\n      __typename\n      associated {\n        __typename\n        associated {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n        conversation {\n          __typename\n          createdAt\n          id\n          discoveryId\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          latestMessage {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          discovery {\n            __typename\n            geohashPrefix\n            discoveryId\n            active\n            cognitoUserName\n            description\n            price\n            request_or_offer\n            time\n            title\n            geoJson\n            image_0\n            image_1\n            image_2\n            image_3\n            image_4\n            image_5\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            latitude\n            longitude\n            isSaved\n          }\n          authorUserName\n        }\n        conversationId\n        user {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        username\n      }\n      conversation {\n        __typename\n        createdAt\n        id\n        discoveryId\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        latestMessage {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        discovery {\n          __typename\n          geohashPrefix\n          discoveryId\n          active\n          cognitoUserName\n          description\n          price\n          request_or_offer\n          time\n          title\n          geoJson\n          image_0\n          image_1\n          image_2\n          image_3\n          image_4\n          image_5\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          latitude\n          longitude\n          isSaved\n        }\n        authorUserName\n      }\n      conversationId\n      user {\n        __typename\n        username\n        conversations {\n          __typename\n          nextToken\n          userConversations {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n        }\n        messages {\n          __typename\n          messages {\n            __typename\n            author {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            content\n            conversationId\n            createdAt\n            id\n            isSent\n            recipient {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            sender\n          }\n          nextToken\n        }\n        registered\n        about\n        profilePic\n        rating\n        signUpDate\n        family_name\n        given_name\n        school\n        categories\n        hasChosenCategories\n      }\n      username\n    }\n    conversation {\n      __typename\n      createdAt\n      id\n      discoveryId\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      latestMessage {\n        __typename\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        content\n        conversationId\n        createdAt\n        id\n        isSent\n        recipient {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        sender\n      }\n      discovery {\n        __typename\n        geohashPrefix\n        discoveryId\n        active\n        cognitoUserName\n        description\n        price\n        request_or_offer\n        time\n        title\n        geoJson\n        image_0\n        image_1\n        image_2\n        image_3\n        image_4\n        image_5\n        author {\n          __typename\n          username\n          conversations {\n            __typename\n            nextToken\n            userConversations {\n              __typename\n              conversationId\n              username\n            }\n          }\n          messages {\n            __typename\n            messages {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            nextToken\n          }\n          registered\n          about\n          profilePic\n          rating\n          signUpDate\n          family_name\n          given_name\n          school\n          categories\n          hasChosenCategories\n        }\n        latitude\n        longitude\n        isSaved\n      }\n      authorUserName\n    }\n    conversationId\n    user {\n      __typename\n      username\n      conversations {\n        __typename\n        nextToken\n        userConversations {\n          __typename\n          associated {\n            __typename\n            associated {\n              __typename\n              conversationId\n              username\n            }\n            conversation {\n              __typename\n              createdAt\n              id\n              discoveryId\n              authorUserName\n            }\n            conversationId\n            user {\n              __typename\n              username\n              registered\n              about\n              profilePic\n              rating\n              signUpDate\n              family_name\n              given_name\n              school\n              categories\n              hasChosenCategories\n            }\n            username\n          }\n          conversation {\n            __typename\n            createdAt\n            id\n            discoveryId\n            messages {\n              __typename\n              nextToken\n            }\n            latestMessage {\n              __typename\n              content\n              conversationId\n              createdAt\n              id\n              isSent\n              sender\n            }\n            discovery {\n              __typename\n              geohashPrefix\n              discoveryId\n              active\n              cognitoUserName\n              description\n              price\n              request_or_offer\n              time\n              title\n              geoJson\n              image_0\n              image_1\n              image_2\n              image_3\n              image_4\n              image_5\n              latitude\n              longitude\n              isSaved\n            }\n            authorUserName\n          }\n          conversationId\n          user {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          username\n        }\n      }\n      messages {\n        __typename\n        messages {\n          __typename\n          author {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          content\n          conversationId\n          createdAt\n          id\n          isSent\n          recipient {\n            __typename\n            username\n            conversations {\n              __typename\n              nextToken\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            registered\n            about\n            profilePic\n            rating\n            signUpDate\n            family_name\n            given_name\n            school\n            categories\n            hasChosenCategories\n          }\n          sender\n        }\n        nextToken\n      }\n      registered\n      about\n      profilePic\n      rating\n      signUpDate\n      family_name\n      given_name\n      school\n      categories\n      hasChosenCategories\n    }\n    username\n  }\n}"

  public var username: GraphQLID

  public init(username: GraphQLID) {
    self.username = username
  }

  public var variables: GraphQLMap? {
    return ["username": username]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("subscribeToNewUCs", arguments: ["username": GraphQLVariable("username")], type: .object(SubscribeToNewUc.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(subscribeToNewUCs: SubscribeToNewUc? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "subscribeToNewUCs": subscribeToNewUCs.flatMap { $0.snapshot }])
    }

    /// Subscribe to a convo, if someone replies to your discovery
    public var subscribeToNewUCs: SubscribeToNewUc? {
      get {
        return (snapshot["subscribeToNewUCs"] as? Snapshot).flatMap { SubscribeToNewUc(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "subscribeToNewUCs")
      }
    }

    public struct SubscribeToNewUc: GraphQLSelectionSet {
      public static let possibleTypes = ["UserConversations"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("associated", type: .list(.object(Associated.selections))),
        GraphQLField("conversation", type: .object(Conversation.selections)),
        GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
        self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var associated: [Associated?]? {
        get {
          return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
        }
      }

      public var conversation: Conversation? {
        get {
          return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
        }
      }

      public var conversationId: GraphQLID {
        get {
          return snapshot["conversationId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "conversationId")
        }
      }

      public var user: User? {
        get {
          return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "user")
        }
      }

      public var username: GraphQLID {
        get {
          return snapshot["username"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "username")
        }
      }

      public struct Associated: GraphQLSelectionSet {
        public static let possibleTypes = ["UserConversations"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("associated", type: .list(.object(Associated.selections))),
          GraphQLField("conversation", type: .object(Conversation.selections)),
          GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
          self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var associated: [Associated?]? {
          get {
            return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
          }
        }

        public var conversation: Conversation? {
          get {
            return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
          }
        }

        public var conversationId: GraphQLID {
          get {
            return snapshot["conversationId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "conversationId")
          }
        }

        public var user: User? {
          get {
            return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "user")
          }
        }

        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        public struct Associated: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConversations"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("associated", type: .list(.object(Associated.selections))),
            GraphQLField("conversation", type: .object(Conversation.selections)),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
            self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var associated: [Associated?]? {
            get {
              return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
            }
          }

          public var conversation: Conversation? {
            get {
              return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
            }
          }

          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          public var user: User? {
            get {
              return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "user")
            }
          }

          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          public struct Associated: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["Conversation"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
              GraphQLField("discovery", type: .object(Discovery.selections)),
              GraphQLField("authorUserName", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
              self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The Conversation's timestamp.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// A unique identifier for the Conversation.
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// The Conversation's discoveryId. (formerly known as name)
            public var discoveryId: String {
              get {
                return snapshot["discoveryId"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// The Conversation's messages.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Latest message of a conversation
            public var latestMessage: LatestMessage? {
              get {
                return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
              }
            }

            /// Discovery related to the conversation
            public var discovery: Discovery? {
              get {
                return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
              }
            }

            /// Username of the person that started this conversation
            public var authorUserName: String? {
              get {
                return snapshot["authorUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "authorUserName")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }

            public struct LatestMessage: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Discovery: GraphQLSelectionSet {
              public static let possibleTypes = ["Discovery"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                GraphQLField("discoveryId", type: .scalar(String.self)),
                GraphQLField("active", type: .scalar(Bool.self)),
                GraphQLField("cognitoUserName", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("request_or_offer", type: .scalar(String.self)),
                GraphQLField("time", type: .scalar(Int.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("geoJson", type: .scalar(String.self)),
                GraphQLField("image_0", type: .scalar(String.self)),
                GraphQLField("image_1", type: .scalar(String.self)),
                GraphQLField("image_2", type: .scalar(String.self)),
                GraphQLField("image_3", type: .scalar(String.self)),
                GraphQLField("image_4", type: .scalar(String.self)),
                GraphQLField("image_5", type: .scalar(String.self)),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("latitude", type: .scalar(Double.self)),
                GraphQLField("longitude", type: .scalar(Double.self)),
                GraphQLField("isSaved", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// geo has prefix - used as the primary partition key
              public var geohashPrefix: Int? {
                get {
                  return snapshot["geohashPrefix"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geohashPrefix")
                }
              }

              /// id of the discovery, used as the primary sort key
              public var discoveryId: String? {
                get {
                  return snapshot["discoveryId"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// Whether this discovery is on the network or not
              public var active: Bool? {
                get {
                  return snapshot["active"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "active")
                }
              }

              /// Username of the owner, same thing as cognitoId
              public var cognitoUserName: String? {
                get {
                  return snapshot["cognitoUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "cognitoUserName")
                }
              }

              /// Description of the discovery
              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }

              /// Price of the discovery
              public var price: Int? {
                get {
                  return snapshot["price"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "price")
                }
              }

              /// Is this a request or an offer
              public var requestOrOffer: String? {
                get {
                  return snapshot["request_or_offer"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "request_or_offer")
                }
              }

              /// When this discovery was created, seconds from epoch
              public var time: Int? {
                get {
                  return snapshot["time"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "time")
                }
              }

              /// Title of the discovery
              public var title: String? {
                get {
                  return snapshot["title"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "title")
                }
              }

              /// JSON Data that shows the positon of this discovery
              public var geoJson: String? {
                get {
                  return snapshot["geoJson"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "geoJson")
                }
              }

              /// image 1
              public var image_0: String? {
                get {
                  return snapshot["image_0"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_0")
                }
              }

              /// image 2
              public var image_1: String? {
                get {
                  return snapshot["image_1"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_1")
                }
              }

              /// image 3
              public var image_2: String? {
                get {
                  return snapshot["image_2"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_2")
                }
              }

              /// image 4
              public var image_3: String? {
                get {
                  return snapshot["image_3"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_3")
                }
              }

              /// image 5
              public var image_4: String? {
                get {
                  return snapshot["image_4"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_4")
                }
              }

              /// image 5
              public var image_5: String? {
                get {
                  return snapshot["image_5"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "image_5")
                }
              }

              /// Author of this discovery
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// Latitude of the discovery in degrees
              public var latitude: Double? {
                get {
                  return snapshot["latitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "latitude")
                }
              }

              /// Longitude of the discovery in degrees
              public var longitude: Double? {
                get {
                  return snapshot["longitude"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "longitude")
                }
              }

              /// checks to see if this discovery has been added to my saved discoveries or not
              public var isSaved: Bool? {
                get {
                  return snapshot["isSaved"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSaved")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["Conversation"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
            GraphQLField("discovery", type: .object(Discovery.selections)),
            GraphQLField("authorUserName", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
            self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The Conversation's timestamp.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// A unique identifier for the Conversation.
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// The Conversation's discoveryId. (formerly known as name)
          public var discoveryId: String {
            get {
              return snapshot["discoveryId"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// The Conversation's messages.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Latest message of a conversation
          public var latestMessage: LatestMessage? {
            get {
              return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
            }
          }

          /// Discovery related to the conversation
          public var discovery: Discovery? {
            get {
              return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
            }
          }

          /// Username of the person that started this conversation
          public var authorUserName: String? {
            get {
              return snapshot["authorUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "authorUserName")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct LatestMessage: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }

          public struct Discovery: GraphQLSelectionSet {
            public static let possibleTypes = ["Discovery"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("geohashPrefix", type: .scalar(Int.self)),
              GraphQLField("discoveryId", type: .scalar(String.self)),
              GraphQLField("active", type: .scalar(Bool.self)),
              GraphQLField("cognitoUserName", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
              GraphQLField("request_or_offer", type: .scalar(String.self)),
              GraphQLField("time", type: .scalar(Int.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("geoJson", type: .scalar(String.self)),
              GraphQLField("image_0", type: .scalar(String.self)),
              GraphQLField("image_1", type: .scalar(String.self)),
              GraphQLField("image_2", type: .scalar(String.self)),
              GraphQLField("image_3", type: .scalar(String.self)),
              GraphQLField("image_4", type: .scalar(String.self)),
              GraphQLField("image_5", type: .scalar(String.self)),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("latitude", type: .scalar(Double.self)),
              GraphQLField("longitude", type: .scalar(Double.self)),
              GraphQLField("isSaved", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
              self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// geo has prefix - used as the primary partition key
            public var geohashPrefix: Int? {
              get {
                return snapshot["geohashPrefix"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "geohashPrefix")
              }
            }

            /// id of the discovery, used as the primary sort key
            public var discoveryId: String? {
              get {
                return snapshot["discoveryId"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "discoveryId")
              }
            }

            /// Whether this discovery is on the network or not
            public var active: Bool? {
              get {
                return snapshot["active"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "active")
              }
            }

            /// Username of the owner, same thing as cognitoId
            public var cognitoUserName: String? {
              get {
                return snapshot["cognitoUserName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "cognitoUserName")
              }
            }

            /// Description of the discovery
            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            /// Price of the discovery
            public var price: Int? {
              get {
                return snapshot["price"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "price")
              }
            }

            /// Is this a request or an offer
            public var requestOrOffer: String? {
              get {
                return snapshot["request_or_offer"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "request_or_offer")
              }
            }

            /// When this discovery was created, seconds from epoch
            public var time: Int? {
              get {
                return snapshot["time"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "time")
              }
            }

            /// Title of the discovery
            public var title: String? {
              get {
                return snapshot["title"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "title")
              }
            }

            /// JSON Data that shows the positon of this discovery
            public var geoJson: String? {
              get {
                return snapshot["geoJson"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "geoJson")
              }
            }

            /// image 1
            public var image_0: String? {
              get {
                return snapshot["image_0"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_0")
              }
            }

            /// image 2
            public var image_1: String? {
              get {
                return snapshot["image_1"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_1")
              }
            }

            /// image 3
            public var image_2: String? {
              get {
                return snapshot["image_2"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_2")
              }
            }

            /// image 4
            public var image_3: String? {
              get {
                return snapshot["image_3"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_3")
              }
            }

            /// image 5
            public var image_4: String? {
              get {
                return snapshot["image_4"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_4")
              }
            }

            /// image 5
            public var image_5: String? {
              get {
                return snapshot["image_5"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "image_5")
              }
            }

            /// Author of this discovery
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// Latitude of the discovery in degrees
            public var latitude: Double? {
              get {
                return snapshot["latitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "latitude")
              }
            }

            /// Longitude of the discovery in degrees
            public var longitude: Double? {
              get {
                return snapshot["longitude"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "longitude")
              }
            }

            /// checks to see if this discovery has been added to my saved discoveries or not
            public var isSaved: Bool? {
              get {
                return snapshot["isSaved"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSaved")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("conversations", type: .object(Conversation.selections)),
            GraphQLField("messages", type: .object(Message.selections)),
            GraphQLField("registered", type: .scalar(Bool.self)),
            GraphQLField("about", type: .scalar(String.self)),
            GraphQLField("profilePic", type: .scalar(String.self)),
            GraphQLField("rating", type: .scalar(Double.self)),
            GraphQLField("signUpDate", type: .scalar(Double.self)),
            GraphQLField("family_name", type: .scalar(String.self)),
            GraphQLField("given_name", type: .scalar(String.self)),
            GraphQLField("school", type: .scalar(String.self)),
            GraphQLField("categories", type: .list(.scalar(String.self))),
            GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
            self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// A unique identifier for the user. (cognito id)
          public var username: GraphQLID {
            get {
              return snapshot["username"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "username")
            }
          }

          /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
          public var conversations: Conversation? {
            get {
              return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
            }
          }

          /// Get a users messages by querying a GSI on the Messages table.
          public var messages: Message? {
            get {
              return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "messages")
            }
          }

          /// Is the user registered?
          public var registered: Bool? {
            get {
              return snapshot["registered"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "registered")
            }
          }

          /// About section of a user
          public var about: String? {
            get {
              return snapshot["about"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "about")
            }
          }

          /// Link to the profile image of the user
          public var profilePic: String? {
            get {
              return snapshot["profilePic"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "profilePic")
            }
          }

          /// Rating of this user
          public var rating: Double? {
            get {
              return snapshot["rating"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "rating")
            }
          }

          /// Date that a user signed up on, represented in epoch time in milliseconds
          public var signUpDate: Double? {
            get {
              return snapshot["signUpDate"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "signUpDate")
            }
          }

          /// The last name of a user
          public var familyName: String? {
            get {
              return snapshot["family_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "family_name")
            }
          }

          /// The first name of a user
          public var givenName: String? {
            get {
              return snapshot["given_name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "given_name")
            }
          }

          /// School the person attends
          public var school: String? {
            get {
              return snapshot["school"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "school")
            }
          }

          /// categories
          public var categories: [String?]? {
            get {
              return snapshot["categories"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "categories")
            }
          }

          /// Determines whether a person has already selected categories for the first time or not.
          public var hasChosenCategories: Bool? {
            get {
              return snapshot["hasChosenCategories"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "hasChosenCategories")
            }
          }

          public struct Conversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConverstationsConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("nextToken", type: .scalar(String.self)),
              GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
              self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public var userConversations: [UserConversation?]? {
              get {
                return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
              }
            }

            public struct UserConversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["MessageConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("messages", type: .list(.object(Message.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(messages: [Message?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var messages: [Message?]? {
              get {
                return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["Message"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("author", type: .object(Author.selections)),
                GraphQLField("content", type: .nonNull(.scalar(String.self))),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("isSent", type: .scalar(Bool.self)),
                GraphQLField("recipient", type: .object(Recipient.selections)),
                GraphQLField("sender", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
                self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
              public var author: Author? {
                get {
                  return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "author")
                }
              }

              /// The message content.
              public var content: String {
                get {
                  return snapshot["content"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "content")
                }
              }

              /// The id of the Conversation this message belongs to. This is the table primary key.
              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              /// The message timestamp. This is also the table sort key.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// Generated id for a message -- read-only
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// Flag denoting if this message has been accepted by the server or not.
              public var isSent: Bool? {
                get {
                  return snapshot["isSent"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isSent")
                }
              }

              public var recipient: Recipient? {
                get {
                  return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
                }
              }

              public var sender: String? {
                get {
                  return snapshot["sender"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "sender")
                }
              }

              public struct Author: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }

              public struct Recipient: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }
          }
        }
      }

      public struct Conversation: GraphQLSelectionSet {
        public static let possibleTypes = ["Conversation"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(Int.self)),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
          GraphQLField("discovery", type: .object(Discovery.selections)),
          GraphQLField("authorUserName", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
          self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The Conversation's timestamp.
        public var createdAt: Int? {
          get {
            return snapshot["createdAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// A unique identifier for the Conversation.
        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        /// The Conversation's discoveryId. (formerly known as name)
        public var discoveryId: String {
          get {
            return snapshot["discoveryId"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "discoveryId")
          }
        }

        /// The Conversation's messages.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Latest message of a conversation
        public var latestMessage: LatestMessage? {
          get {
            return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
          }
        }

        /// Discovery related to the conversation
        public var discovery: Discovery? {
          get {
            return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
          }
        }

        /// Username of the person that started this conversation
        public var authorUserName: String? {
          get {
            return snapshot["authorUserName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "authorUserName")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct LatestMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("content", type: .nonNull(.scalar(String.self))),
            GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .scalar(Int.self)),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("isSent", type: .scalar(Bool.self)),
            GraphQLField("recipient", type: .object(Recipient.selections)),
            GraphQLField("sender", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
            self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// The message content.
          public var content: String {
            get {
              return snapshot["content"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          /// The id of the Conversation this message belongs to. This is the table primary key.
          public var conversationId: GraphQLID {
            get {
              return snapshot["conversationId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "conversationId")
            }
          }

          /// The message timestamp. This is also the table sort key.
          public var createdAt: Int? {
            get {
              return snapshot["createdAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// Generated id for a message -- read-only
          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          /// Flag denoting if this message has been accepted by the server or not.
          public var isSent: Bool? {
            get {
              return snapshot["isSent"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSent")
            }
          }

          public var recipient: Recipient? {
            get {
              return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
            }
          }

          public var sender: String? {
            get {
              return snapshot["sender"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sender")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }

          public struct Recipient: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }

        public struct Discovery: GraphQLSelectionSet {
          public static let possibleTypes = ["Discovery"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("geohashPrefix", type: .scalar(Int.self)),
            GraphQLField("discoveryId", type: .scalar(String.self)),
            GraphQLField("active", type: .scalar(Bool.self)),
            GraphQLField("cognitoUserName", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
            GraphQLField("request_or_offer", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("geoJson", type: .scalar(String.self)),
            GraphQLField("image_0", type: .scalar(String.self)),
            GraphQLField("image_1", type: .scalar(String.self)),
            GraphQLField("image_2", type: .scalar(String.self)),
            GraphQLField("image_3", type: .scalar(String.self)),
            GraphQLField("image_4", type: .scalar(String.self)),
            GraphQLField("image_5", type: .scalar(String.self)),
            GraphQLField("author", type: .object(Author.selections)),
            GraphQLField("latitude", type: .scalar(Double.self)),
            GraphQLField("longitude", type: .scalar(Double.self)),
            GraphQLField("isSaved", type: .scalar(Bool.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, author: Author? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
            self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "author": author.flatMap { $0.snapshot }, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          /// geo has prefix - used as the primary partition key
          public var geohashPrefix: Int? {
            get {
              return snapshot["geohashPrefix"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "geohashPrefix")
            }
          }

          /// id of the discovery, used as the primary sort key
          public var discoveryId: String? {
            get {
              return snapshot["discoveryId"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "discoveryId")
            }
          }

          /// Whether this discovery is on the network or not
          public var active: Bool? {
            get {
              return snapshot["active"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "active")
            }
          }

          /// Username of the owner, same thing as cognitoId
          public var cognitoUserName: String? {
            get {
              return snapshot["cognitoUserName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "cognitoUserName")
            }
          }

          /// Description of the discovery
          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          /// Price of the discovery
          public var price: Int? {
            get {
              return snapshot["price"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "price")
            }
          }

          /// Is this a request or an offer
          public var requestOrOffer: String? {
            get {
              return snapshot["request_or_offer"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "request_or_offer")
            }
          }

          /// When this discovery was created, seconds from epoch
          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          /// Title of the discovery
          public var title: String? {
            get {
              return snapshot["title"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "title")
            }
          }

          /// JSON Data that shows the positon of this discovery
          public var geoJson: String? {
            get {
              return snapshot["geoJson"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "geoJson")
            }
          }

          /// image 1
          public var image_0: String? {
            get {
              return snapshot["image_0"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_0")
            }
          }

          /// image 2
          public var image_1: String? {
            get {
              return snapshot["image_1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_1")
            }
          }

          /// image 3
          public var image_2: String? {
            get {
              return snapshot["image_2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_2")
            }
          }

          /// image 4
          public var image_3: String? {
            get {
              return snapshot["image_3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_3")
            }
          }

          /// image 5
          public var image_4: String? {
            get {
              return snapshot["image_4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_4")
            }
          }

          /// image 5
          public var image_5: String? {
            get {
              return snapshot["image_5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image_5")
            }
          }

          /// Author of this discovery
          public var author: Author? {
            get {
              return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "author")
            }
          }

          /// Latitude of the discovery in degrees
          public var latitude: Double? {
            get {
              return snapshot["latitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "latitude")
            }
          }

          /// Longitude of the discovery in degrees
          public var longitude: Double? {
            get {
              return snapshot["longitude"] as? Double
            }
            set {
              snapshot.updateValue(newValue, forKey: "longitude")
            }
          }

          /// checks to see if this discovery has been added to my saved discoveries or not
          public var isSaved: Bool? {
            get {
              return snapshot["isSaved"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isSaved")
            }
          }

          public struct Author: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("conversations", type: .object(Conversation.selections)),
              GraphQLField("messages", type: .object(Message.selections)),
              GraphQLField("registered", type: .scalar(Bool.self)),
              GraphQLField("about", type: .scalar(String.self)),
              GraphQLField("profilePic", type: .scalar(String.self)),
              GraphQLField("rating", type: .scalar(Double.self)),
              GraphQLField("signUpDate", type: .scalar(Double.self)),
              GraphQLField("family_name", type: .scalar(String.self)),
              GraphQLField("given_name", type: .scalar(String.self)),
              GraphQLField("school", type: .scalar(String.self)),
              GraphQLField("categories", type: .list(.scalar(String.self))),
              GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
              self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// A unique identifier for the user. (cognito id)
            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
            public var conversations: Conversation? {
              get {
                return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
              }
            }

            /// Get a users messages by querying a GSI on the Messages table.
            public var messages: Message? {
              get {
                return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "messages")
              }
            }

            /// Is the user registered?
            public var registered: Bool? {
              get {
                return snapshot["registered"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "registered")
              }
            }

            /// About section of a user
            public var about: String? {
              get {
                return snapshot["about"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "about")
              }
            }

            /// Link to the profile image of the user
            public var profilePic: String? {
              get {
                return snapshot["profilePic"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "profilePic")
              }
            }

            /// Rating of this user
            public var rating: Double? {
              get {
                return snapshot["rating"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "rating")
              }
            }

            /// Date that a user signed up on, represented in epoch time in milliseconds
            public var signUpDate: Double? {
              get {
                return snapshot["signUpDate"] as? Double
              }
              set {
                snapshot.updateValue(newValue, forKey: "signUpDate")
              }
            }

            /// The last name of a user
            public var familyName: String? {
              get {
                return snapshot["family_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "family_name")
              }
            }

            /// The first name of a user
            public var givenName: String? {
              get {
                return snapshot["given_name"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "given_name")
              }
            }

            /// School the person attends
            public var school: String? {
              get {
                return snapshot["school"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "school")
              }
            }

            /// categories
            public var categories: [String?]? {
              get {
                return snapshot["categories"] as? [String?]
              }
              set {
                snapshot.updateValue(newValue, forKey: "categories")
              }
            }

            /// Determines whether a person has already selected categories for the first time or not.
            public var hasChosenCategories: Bool? {
              get {
                return snapshot["hasChosenCategories"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "hasChosenCategories")
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConverstationsConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
                GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
                self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public var userConversations: [UserConversation?]? {
                get {
                  return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
                }
              }

              public struct UserConversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }
            }

            public struct Message: GraphQLSelectionSet {
              public static let possibleTypes = ["MessageConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .list(.object(Message.selections))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(messages: [Message?]? = nil, nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var messages: [Message?]? {
                get {
                  return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("conversations", type: .object(Conversation.selections)),
          GraphQLField("messages", type: .object(Message.selections)),
          GraphQLField("registered", type: .scalar(Bool.self)),
          GraphQLField("about", type: .scalar(String.self)),
          GraphQLField("profilePic", type: .scalar(String.self)),
          GraphQLField("rating", type: .scalar(Double.self)),
          GraphQLField("signUpDate", type: .scalar(Double.self)),
          GraphQLField("family_name", type: .scalar(String.self)),
          GraphQLField("given_name", type: .scalar(String.self)),
          GraphQLField("school", type: .scalar(String.self)),
          GraphQLField("categories", type: .list(.scalar(String.self))),
          GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
          self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        /// A unique identifier for the user. (cognito id)
        public var username: GraphQLID {
          get {
            return snapshot["username"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "username")
          }
        }

        /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
        public var conversations: Conversation? {
          get {
            return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
          }
        }

        /// Get a users messages by querying a GSI on the Messages table.
        public var messages: Message? {
          get {
            return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "messages")
          }
        }

        /// Is the user registered?
        public var registered: Bool? {
          get {
            return snapshot["registered"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "registered")
          }
        }

        /// About section of a user
        public var about: String? {
          get {
            return snapshot["about"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "about")
          }
        }

        /// Link to the profile image of the user
        public var profilePic: String? {
          get {
            return snapshot["profilePic"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "profilePic")
          }
        }

        /// Rating of this user
        public var rating: Double? {
          get {
            return snapshot["rating"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "rating")
          }
        }

        /// Date that a user signed up on, represented in epoch time in milliseconds
        public var signUpDate: Double? {
          get {
            return snapshot["signUpDate"] as? Double
          }
          set {
            snapshot.updateValue(newValue, forKey: "signUpDate")
          }
        }

        /// The last name of a user
        public var familyName: String? {
          get {
            return snapshot["family_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "family_name")
          }
        }

        /// The first name of a user
        public var givenName: String? {
          get {
            return snapshot["given_name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "given_name")
          }
        }

        /// School the person attends
        public var school: String? {
          get {
            return snapshot["school"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "school")
          }
        }

        /// categories
        public var categories: [String?]? {
          get {
            return snapshot["categories"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "categories")
          }
        }

        /// Determines whether a person has already selected categories for the first time or not.
        public var hasChosenCategories: Bool? {
          get {
            return snapshot["hasChosenCategories"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "hasChosenCategories")
          }
        }

        public struct Conversation: GraphQLSelectionSet {
          public static let possibleTypes = ["UserConverstationsConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("userConversations", type: .list(.object(UserConversation.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, userConversations: [UserConversation?]? = nil) {
            self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken, "userConversations": userConversations.flatMap { $0.map { $0.flatMap { $0.snapshot } } }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var userConversations: [UserConversation?]? {
            get {
              return (snapshot["userConversations"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { UserConversation(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "userConversations")
            }
          }

          public struct UserConversation: GraphQLSelectionSet {
            public static let possibleTypes = ["UserConversations"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("associated", type: .list(.object(Associated.selections))),
              GraphQLField("conversation", type: .object(Conversation.selections)),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
              self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var associated: [Associated?]? {
              get {
                return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
              }
            }

            public var conversation: Conversation? {
              get {
                return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
              }
            }

            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            public var user: User? {
              get {
                return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "user")
              }
            }

            public var username: GraphQLID {
              get {
                return snapshot["username"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "username")
              }
            }

            public struct Associated: GraphQLSelectionSet {
              public static let possibleTypes = ["UserConversations"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("associated", type: .list(.object(Associated.selections))),
                GraphQLField("conversation", type: .object(Conversation.selections)),
                GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("user", type: .object(User.selections)),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(associated: [Associated?]? = nil, conversation: Conversation? = nil, conversationId: GraphQLID, user: User? = nil, username: GraphQLID) {
                self.init(snapshot: ["__typename": "UserConversations", "associated": associated.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "conversation": conversation.flatMap { $0.snapshot }, "conversationId": conversationId, "user": user.flatMap { $0.snapshot }, "username": username])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var associated: [Associated?]? {
                get {
                  return (snapshot["associated"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Associated(snapshot: $0) } } }
                }
                set {
                  snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "associated")
                }
              }

              public var conversation: Conversation? {
                get {
                  return (snapshot["conversation"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversation")
                }
              }

              public var conversationId: GraphQLID {
                get {
                  return snapshot["conversationId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "conversationId")
                }
              }

              public var user: User? {
                get {
                  return (snapshot["user"] as? Snapshot).flatMap { User(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "user")
                }
              }

              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              public struct Associated: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConversations"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(conversationId: GraphQLID, username: GraphQLID) {
                  self.init(snapshot: ["__typename": "UserConversations", "conversationId": conversationId, "username": username])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["Conversation"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                  GraphQLField("authorUserName", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, authorUserName: String? = nil) {
                  self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "authorUserName": authorUserName])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The Conversation's timestamp.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// A unique identifier for the Conversation.
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// The Conversation's discoveryId. (formerly known as name)
                public var discoveryId: String {
                  get {
                    return snapshot["discoveryId"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Username of the person that started this conversation
                public var authorUserName: String? {
                  get {
                    return snapshot["authorUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "authorUserName")
                  }
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["User"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("registered", type: .scalar(Bool.self)),
                  GraphQLField("about", type: .scalar(String.self)),
                  GraphQLField("profilePic", type: .scalar(String.self)),
                  GraphQLField("rating", type: .scalar(Double.self)),
                  GraphQLField("signUpDate", type: .scalar(Double.self)),
                  GraphQLField("family_name", type: .scalar(String.self)),
                  GraphQLField("given_name", type: .scalar(String.self)),
                  GraphQLField("school", type: .scalar(String.self)),
                  GraphQLField("categories", type: .list(.scalar(String.self))),
                  GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(username: GraphQLID, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                  self.init(snapshot: ["__typename": "User", "username": username, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// A unique identifier for the user. (cognito id)
                public var username: GraphQLID {
                  get {
                    return snapshot["username"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "username")
                  }
                }

                /// Is the user registered?
                public var registered: Bool? {
                  get {
                    return snapshot["registered"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "registered")
                  }
                }

                /// About section of a user
                public var about: String? {
                  get {
                    return snapshot["about"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "about")
                  }
                }

                /// Link to the profile image of the user
                public var profilePic: String? {
                  get {
                    return snapshot["profilePic"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "profilePic")
                  }
                }

                /// Rating of this user
                public var rating: Double? {
                  get {
                    return snapshot["rating"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "rating")
                  }
                }

                /// Date that a user signed up on, represented in epoch time in milliseconds
                public var signUpDate: Double? {
                  get {
                    return snapshot["signUpDate"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "signUpDate")
                  }
                }

                /// The last name of a user
                public var familyName: String? {
                  get {
                    return snapshot["family_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "family_name")
                  }
                }

                /// The first name of a user
                public var givenName: String? {
                  get {
                    return snapshot["given_name"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "given_name")
                  }
                }

                /// School the person attends
                public var school: String? {
                  get {
                    return snapshot["school"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "school")
                  }
                }

                /// categories
                public var categories: [String?]? {
                  get {
                    return snapshot["categories"] as? [String?]
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "categories")
                  }
                }

                /// Determines whether a person has already selected categories for the first time or not.
                public var hasChosenCategories: Bool? {
                  get {
                    return snapshot["hasChosenCategories"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                  }
                }
              }
            }

            public struct Conversation: GraphQLSelectionSet {
              public static let possibleTypes = ["Conversation"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("createdAt", type: .scalar(Int.self)),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("discoveryId", type: .nonNull(.scalar(String.self))),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("latestMessage", type: .object(LatestMessage.selections)),
                GraphQLField("discovery", type: .object(Discovery.selections)),
                GraphQLField("authorUserName", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(createdAt: Int? = nil, id: GraphQLID, discoveryId: String, messages: Message? = nil, latestMessage: LatestMessage? = nil, discovery: Discovery? = nil, authorUserName: String? = nil) {
                self.init(snapshot: ["__typename": "Conversation", "createdAt": createdAt, "id": id, "discoveryId": discoveryId, "messages": messages.flatMap { $0.snapshot }, "latestMessage": latestMessage.flatMap { $0.snapshot }, "discovery": discovery.flatMap { $0.snapshot }, "authorUserName": authorUserName])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// The Conversation's timestamp.
              public var createdAt: Int? {
                get {
                  return snapshot["createdAt"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "createdAt")
                }
              }

              /// A unique identifier for the Conversation.
              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              /// The Conversation's discoveryId. (formerly known as name)
              public var discoveryId: String {
                get {
                  return snapshot["discoveryId"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "discoveryId")
                }
              }

              /// The Conversation's messages.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Latest message of a conversation
              public var latestMessage: LatestMessage? {
                get {
                  return (snapshot["latestMessage"] as? Snapshot).flatMap { LatestMessage(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "latestMessage")
                }
              }

              /// Discovery related to the conversation
              public var discovery: Discovery? {
                get {
                  return (snapshot["discovery"] as? Snapshot).flatMap { Discovery(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "discovery")
                }
              }

              /// Username of the person that started this conversation
              public var authorUserName: String? {
                get {
                  return snapshot["authorUserName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "authorUserName")
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct LatestMessage: GraphQLSelectionSet {
                public static let possibleTypes = ["Message"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("content", type: .nonNull(.scalar(String.self))),
                  GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("createdAt", type: .scalar(Int.self)),
                  GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                  GraphQLField("isSent", type: .scalar(Bool.self)),
                  GraphQLField("sender", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, sender: String? = nil) {
                  self.init(snapshot: ["__typename": "Message", "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "sender": sender])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// The message content.
                public var content: String {
                  get {
                    return snapshot["content"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "content")
                  }
                }

                /// The id of the Conversation this message belongs to. This is the table primary key.
                public var conversationId: GraphQLID {
                  get {
                    return snapshot["conversationId"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "conversationId")
                  }
                }

                /// The message timestamp. This is also the table sort key.
                public var createdAt: Int? {
                  get {
                    return snapshot["createdAt"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "createdAt")
                  }
                }

                /// Generated id for a message -- read-only
                public var id: GraphQLID {
                  get {
                    return snapshot["id"]! as! GraphQLID
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "id")
                  }
                }

                /// Flag denoting if this message has been accepted by the server or not.
                public var isSent: Bool? {
                  get {
                    return snapshot["isSent"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSent")
                  }
                }

                public var sender: String? {
                  get {
                    return snapshot["sender"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "sender")
                  }
                }
              }

              public struct Discovery: GraphQLSelectionSet {
                public static let possibleTypes = ["Discovery"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("geohashPrefix", type: .scalar(Int.self)),
                  GraphQLField("discoveryId", type: .scalar(String.self)),
                  GraphQLField("active", type: .scalar(Bool.self)),
                  GraphQLField("cognitoUserName", type: .scalar(String.self)),
                  GraphQLField("description", type: .scalar(String.self)),
                  GraphQLField("price", type: .scalar(Int.self)),
                  GraphQLField("request_or_offer", type: .scalar(String.self)),
                  GraphQLField("time", type: .scalar(Int.self)),
                  GraphQLField("title", type: .scalar(String.self)),
                  GraphQLField("geoJson", type: .scalar(String.self)),
                  GraphQLField("image_0", type: .scalar(String.self)),
                  GraphQLField("image_1", type: .scalar(String.self)),
                  GraphQLField("image_2", type: .scalar(String.self)),
                  GraphQLField("image_3", type: .scalar(String.self)),
                  GraphQLField("image_4", type: .scalar(String.self)),
                  GraphQLField("image_5", type: .scalar(String.self)),
                  GraphQLField("latitude", type: .scalar(Double.self)),
                  GraphQLField("longitude", type: .scalar(Double.self)),
                  GraphQLField("isSaved", type: .scalar(Bool.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(geohashPrefix: Int? = nil, discoveryId: String? = nil, active: Bool? = nil, cognitoUserName: String? = nil, description: String? = nil, price: Int? = nil, requestOrOffer: String? = nil, time: Int? = nil, title: String? = nil, geoJson: String? = nil, image_0: String? = nil, image_1: String? = nil, image_2: String? = nil, image_3: String? = nil, image_4: String? = nil, image_5: String? = nil, latitude: Double? = nil, longitude: Double? = nil, isSaved: Bool? = nil) {
                  self.init(snapshot: ["__typename": "Discovery", "geohashPrefix": geohashPrefix, "discoveryId": discoveryId, "active": active, "cognitoUserName": cognitoUserName, "description": description, "price": price, "request_or_offer": requestOrOffer, "time": time, "title": title, "geoJson": geoJson, "image_0": image_0, "image_1": image_1, "image_2": image_2, "image_3": image_3, "image_4": image_4, "image_5": image_5, "latitude": latitude, "longitude": longitude, "isSaved": isSaved])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// geo has prefix - used as the primary partition key
                public var geohashPrefix: Int? {
                  get {
                    return snapshot["geohashPrefix"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geohashPrefix")
                  }
                }

                /// id of the discovery, used as the primary sort key
                public var discoveryId: String? {
                  get {
                    return snapshot["discoveryId"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "discoveryId")
                  }
                }

                /// Whether this discovery is on the network or not
                public var active: Bool? {
                  get {
                    return snapshot["active"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "active")
                  }
                }

                /// Username of the owner, same thing as cognitoId
                public var cognitoUserName: String? {
                  get {
                    return snapshot["cognitoUserName"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "cognitoUserName")
                  }
                }

                /// Description of the discovery
                public var description: String? {
                  get {
                    return snapshot["description"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "description")
                  }
                }

                /// Price of the discovery
                public var price: Int? {
                  get {
                    return snapshot["price"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "price")
                  }
                }

                /// Is this a request or an offer
                public var requestOrOffer: String? {
                  get {
                    return snapshot["request_or_offer"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "request_or_offer")
                  }
                }

                /// When this discovery was created, seconds from epoch
                public var time: Int? {
                  get {
                    return snapshot["time"] as? Int
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "time")
                  }
                }

                /// Title of the discovery
                public var title: String? {
                  get {
                    return snapshot["title"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "title")
                  }
                }

                /// JSON Data that shows the positon of this discovery
                public var geoJson: String? {
                  get {
                    return snapshot["geoJson"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "geoJson")
                  }
                }

                /// image 1
                public var image_0: String? {
                  get {
                    return snapshot["image_0"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_0")
                  }
                }

                /// image 2
                public var image_1: String? {
                  get {
                    return snapshot["image_1"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_1")
                  }
                }

                /// image 3
                public var image_2: String? {
                  get {
                    return snapshot["image_2"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_2")
                  }
                }

                /// image 4
                public var image_3: String? {
                  get {
                    return snapshot["image_3"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_3")
                  }
                }

                /// image 5
                public var image_4: String? {
                  get {
                    return snapshot["image_4"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_4")
                  }
                }

                /// image 5
                public var image_5: String? {
                  get {
                    return snapshot["image_5"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "image_5")
                  }
                }

                /// Latitude of the discovery in degrees
                public var latitude: Double? {
                  get {
                    return snapshot["latitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "latitude")
                  }
                }

                /// Longitude of the discovery in degrees
                public var longitude: Double? {
                  get {
                    return snapshot["longitude"] as? Double
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "longitude")
                  }
                }

                /// checks to see if this discovery has been added to my saved discoveries or not
                public var isSaved: Bool? {
                  get {
                    return snapshot["isSaved"] as? Bool
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "isSaved")
                  }
                }
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["MessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("messages", type: .list(.object(Message.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(messages: [Message?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "MessageConnection", "messages": messages.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var messages: [Message?]? {
            get {
              return (snapshot["messages"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Message(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "messages")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Message: GraphQLSelectionSet {
            public static let possibleTypes = ["Message"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("author", type: .object(Author.selections)),
              GraphQLField("content", type: .nonNull(.scalar(String.self))),
              GraphQLField("conversationId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("createdAt", type: .scalar(Int.self)),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("isSent", type: .scalar(Bool.self)),
              GraphQLField("recipient", type: .object(Recipient.selections)),
              GraphQLField("sender", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(author: Author? = nil, content: String, conversationId: GraphQLID, createdAt: Int? = nil, id: GraphQLID, isSent: Bool? = nil, recipient: Recipient? = nil, sender: String? = nil) {
              self.init(snapshot: ["__typename": "Message", "author": author.flatMap { $0.snapshot }, "content": content, "conversationId": conversationId, "createdAt": createdAt, "id": id, "isSent": isSent, "recipient": recipient.flatMap { $0.snapshot }, "sender": sender])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            /// The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
            public var author: Author? {
              get {
                return (snapshot["author"] as? Snapshot).flatMap { Author(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "author")
              }
            }

            /// The message content.
            public var content: String {
              get {
                return snapshot["content"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "content")
              }
            }

            /// The id of the Conversation this message belongs to. This is the table primary key.
            public var conversationId: GraphQLID {
              get {
                return snapshot["conversationId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "conversationId")
              }
            }

            /// The message timestamp. This is also the table sort key.
            public var createdAt: Int? {
              get {
                return snapshot["createdAt"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// Generated id for a message -- read-only
            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            /// Flag denoting if this message has been accepted by the server or not.
            public var isSent: Bool? {
              get {
                return snapshot["isSent"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isSent")
              }
            }

            public var recipient: Recipient? {
              get {
                return (snapshot["recipient"] as? Snapshot).flatMap { Recipient(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "recipient")
              }
            }

            public var sender: String? {
              get {
                return snapshot["sender"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "sender")
              }
            }

            public struct Author: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }

            public struct Recipient: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("conversations", type: .object(Conversation.selections)),
                GraphQLField("messages", type: .object(Message.selections)),
                GraphQLField("registered", type: .scalar(Bool.self)),
                GraphQLField("about", type: .scalar(String.self)),
                GraphQLField("profilePic", type: .scalar(String.self)),
                GraphQLField("rating", type: .scalar(Double.self)),
                GraphQLField("signUpDate", type: .scalar(Double.self)),
                GraphQLField("family_name", type: .scalar(String.self)),
                GraphQLField("given_name", type: .scalar(String.self)),
                GraphQLField("school", type: .scalar(String.self)),
                GraphQLField("categories", type: .list(.scalar(String.self))),
                GraphQLField("hasChosenCategories", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(username: GraphQLID, conversations: Conversation? = nil, messages: Message? = nil, registered: Bool? = nil, about: String? = nil, profilePic: String? = nil, rating: Double? = nil, signUpDate: Double? = nil, familyName: String? = nil, givenName: String? = nil, school: String? = nil, categories: [String?]? = nil, hasChosenCategories: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "username": username, "conversations": conversations.flatMap { $0.snapshot }, "messages": messages.flatMap { $0.snapshot }, "registered": registered, "about": about, "profilePic": profilePic, "rating": rating, "signUpDate": signUpDate, "family_name": familyName, "given_name": givenName, "school": school, "categories": categories, "hasChosenCategories": hasChosenCategories])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              /// A unique identifier for the user. (cognito id)
              public var username: GraphQLID {
                get {
                  return snapshot["username"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "username")
                }
              }

              /// A user's enrolled Conversations. This is an interesting case. This is an interesting pagination case.
              public var conversations: Conversation? {
                get {
                  return (snapshot["conversations"] as? Snapshot).flatMap { Conversation(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "conversations")
                }
              }

              /// Get a users messages by querying a GSI on the Messages table.
              public var messages: Message? {
                get {
                  return (snapshot["messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
                }
                set {
                  snapshot.updateValue(newValue?.snapshot, forKey: "messages")
                }
              }

              /// Is the user registered?
              public var registered: Bool? {
                get {
                  return snapshot["registered"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "registered")
                }
              }

              /// About section of a user
              public var about: String? {
                get {
                  return snapshot["about"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "about")
                }
              }

              /// Link to the profile image of the user
              public var profilePic: String? {
                get {
                  return snapshot["profilePic"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "profilePic")
                }
              }

              /// Rating of this user
              public var rating: Double? {
                get {
                  return snapshot["rating"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "rating")
                }
              }

              /// Date that a user signed up on, represented in epoch time in milliseconds
              public var signUpDate: Double? {
                get {
                  return snapshot["signUpDate"] as? Double
                }
                set {
                  snapshot.updateValue(newValue, forKey: "signUpDate")
                }
              }

              /// The last name of a user
              public var familyName: String? {
                get {
                  return snapshot["family_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "family_name")
                }
              }

              /// The first name of a user
              public var givenName: String? {
                get {
                  return snapshot["given_name"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "given_name")
                }
              }

              /// School the person attends
              public var school: String? {
                get {
                  return snapshot["school"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "school")
                }
              }

              /// categories
              public var categories: [String?]? {
                get {
                  return snapshot["categories"] as? [String?]
                }
                set {
                  snapshot.updateValue(newValue, forKey: "categories")
                }
              }

              /// Determines whether a person has already selected categories for the first time or not.
              public var hasChosenCategories: Bool? {
                get {
                  return snapshot["hasChosenCategories"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "hasChosenCategories")
                }
              }

              public struct Conversation: GraphQLSelectionSet {
                public static let possibleTypes = ["UserConverstationsConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "UserConverstationsConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }

              public struct Message: GraphQLSelectionSet {
                public static let possibleTypes = ["MessageConnection"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("nextToken", type: .scalar(String.self)),
                ]

                public var snapshot: Snapshot

                public init(snapshot: Snapshot) {
                  self.snapshot = snapshot
                }

                public init(nextToken: String? = nil) {
                  self.init(snapshot: ["__typename": "MessageConnection", "nextToken": nextToken])
                }

                public var __typename: String {
                  get {
                    return snapshot["__typename"]! as! String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var nextToken: String? {
                  get {
                    return snapshot["nextToken"] as? String
                  }
                  set {
                    snapshot.updateValue(newValue, forKey: "nextToken")
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}